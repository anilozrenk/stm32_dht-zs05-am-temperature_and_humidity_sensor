
dht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003718  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003858  08003858  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003858  08003858  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003858  08003858  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  080038d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080038d0  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8dc  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001847  00000000  00000000  0002b974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002dc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa58  00000000  00000000  0002e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c72d  00000000  00000000  00049040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a61dc  00000000  00000000  0005576d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb949  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029cc  00000000  00000000  000fb99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080037bc 	.word	0x080037bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080037bc 	.word	0x080037bc

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_f2uiz>:
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	b510      	push	{r4, lr}
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	1c04      	adds	r4, r0, #0
 8000238:	f000 fa52 	bl	80006e0 <__aeabi_fcmpge>
 800023c:	2800      	cmp	r0, #0
 800023e:	d103      	bne.n	8000248 <__aeabi_f2uiz+0x18>
 8000240:	1c20      	adds	r0, r4, #0
 8000242:	f000 f9bb 	bl	80005bc <__aeabi_f2iz>
 8000246:	bd10      	pop	{r4, pc}
 8000248:	219e      	movs	r1, #158	; 0x9e
 800024a:	1c20      	adds	r0, r4, #0
 800024c:	05c9      	lsls	r1, r1, #23
 800024e:	f000 f807 	bl	8000260 <__aeabi_fsub>
 8000252:	f000 f9b3 	bl	80005bc <__aeabi_f2iz>
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	061b      	lsls	r3, r3, #24
 800025a:	469c      	mov	ip, r3
 800025c:	4460      	add	r0, ip
 800025e:	e7f2      	b.n	8000246 <__aeabi_f2uiz+0x16>

08000260 <__aeabi_fsub>:
 8000260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0243      	lsls	r3, r0, #9
 8000268:	0a5b      	lsrs	r3, r3, #9
 800026a:	024e      	lsls	r6, r1, #9
 800026c:	00da      	lsls	r2, r3, #3
 800026e:	4694      	mov	ip, r2
 8000270:	0a72      	lsrs	r2, r6, #9
 8000272:	4691      	mov	r9, r2
 8000274:	0045      	lsls	r5, r0, #1
 8000276:	004a      	lsls	r2, r1, #1
 8000278:	b580      	push	{r7, lr}
 800027a:	0e2d      	lsrs	r5, r5, #24
 800027c:	001f      	movs	r7, r3
 800027e:	0fc4      	lsrs	r4, r0, #31
 8000280:	0e12      	lsrs	r2, r2, #24
 8000282:	0fc9      	lsrs	r1, r1, #31
 8000284:	09b6      	lsrs	r6, r6, #6
 8000286:	2aff      	cmp	r2, #255	; 0xff
 8000288:	d05b      	beq.n	8000342 <__aeabi_fsub+0xe2>
 800028a:	2001      	movs	r0, #1
 800028c:	4041      	eors	r1, r0
 800028e:	428c      	cmp	r4, r1
 8000290:	d039      	beq.n	8000306 <__aeabi_fsub+0xa6>
 8000292:	1aa8      	subs	r0, r5, r2
 8000294:	2800      	cmp	r0, #0
 8000296:	dd5a      	ble.n	800034e <__aeabi_fsub+0xee>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d06a      	beq.n	8000372 <__aeabi_fsub+0x112>
 800029c:	2dff      	cmp	r5, #255	; 0xff
 800029e:	d100      	bne.n	80002a2 <__aeabi_fsub+0x42>
 80002a0:	e0d9      	b.n	8000456 <__aeabi_fsub+0x1f6>
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	04d2      	lsls	r2, r2, #19
 80002a6:	4316      	orrs	r6, r2
 80002a8:	281b      	cmp	r0, #27
 80002aa:	dc00      	bgt.n	80002ae <__aeabi_fsub+0x4e>
 80002ac:	e0e9      	b.n	8000482 <__aeabi_fsub+0x222>
 80002ae:	2001      	movs	r0, #1
 80002b0:	4663      	mov	r3, ip
 80002b2:	1a18      	subs	r0, r3, r0
 80002b4:	0143      	lsls	r3, r0, #5
 80002b6:	d400      	bmi.n	80002ba <__aeabi_fsub+0x5a>
 80002b8:	e0b4      	b.n	8000424 <__aeabi_fsub+0x1c4>
 80002ba:	0180      	lsls	r0, r0, #6
 80002bc:	0987      	lsrs	r7, r0, #6
 80002be:	0038      	movs	r0, r7
 80002c0:	f000 fa18 	bl	80006f4 <__clzsi2>
 80002c4:	3805      	subs	r0, #5
 80002c6:	4087      	lsls	r7, r0
 80002c8:	4285      	cmp	r5, r0
 80002ca:	dc00      	bgt.n	80002ce <__aeabi_fsub+0x6e>
 80002cc:	e0cc      	b.n	8000468 <__aeabi_fsub+0x208>
 80002ce:	1a2d      	subs	r5, r5, r0
 80002d0:	48b5      	ldr	r0, [pc, #724]	; (80005a8 <__aeabi_fsub+0x348>)
 80002d2:	4038      	ands	r0, r7
 80002d4:	0743      	lsls	r3, r0, #29
 80002d6:	d004      	beq.n	80002e2 <__aeabi_fsub+0x82>
 80002d8:	230f      	movs	r3, #15
 80002da:	4003      	ands	r3, r0
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d000      	beq.n	80002e2 <__aeabi_fsub+0x82>
 80002e0:	3004      	adds	r0, #4
 80002e2:	0143      	lsls	r3, r0, #5
 80002e4:	d400      	bmi.n	80002e8 <__aeabi_fsub+0x88>
 80002e6:	e0a0      	b.n	800042a <__aeabi_fsub+0x1ca>
 80002e8:	1c6a      	adds	r2, r5, #1
 80002ea:	2dfe      	cmp	r5, #254	; 0xfe
 80002ec:	d100      	bne.n	80002f0 <__aeabi_fsub+0x90>
 80002ee:	e08d      	b.n	800040c <__aeabi_fsub+0x1ac>
 80002f0:	0180      	lsls	r0, r0, #6
 80002f2:	0a47      	lsrs	r7, r0, #9
 80002f4:	b2d2      	uxtb	r2, r2
 80002f6:	05d0      	lsls	r0, r2, #23
 80002f8:	4338      	orrs	r0, r7
 80002fa:	07e4      	lsls	r4, r4, #31
 80002fc:	4320      	orrs	r0, r4
 80002fe:	bcc0      	pop	{r6, r7}
 8000300:	46b9      	mov	r9, r7
 8000302:	46b0      	mov	r8, r6
 8000304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000306:	1aa8      	subs	r0, r5, r2
 8000308:	4680      	mov	r8, r0
 800030a:	2800      	cmp	r0, #0
 800030c:	dd45      	ble.n	800039a <__aeabi_fsub+0x13a>
 800030e:	2a00      	cmp	r2, #0
 8000310:	d070      	beq.n	80003f4 <__aeabi_fsub+0x194>
 8000312:	2dff      	cmp	r5, #255	; 0xff
 8000314:	d100      	bne.n	8000318 <__aeabi_fsub+0xb8>
 8000316:	e09e      	b.n	8000456 <__aeabi_fsub+0x1f6>
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	04db      	lsls	r3, r3, #19
 800031c:	431e      	orrs	r6, r3
 800031e:	4643      	mov	r3, r8
 8000320:	2b1b      	cmp	r3, #27
 8000322:	dc00      	bgt.n	8000326 <__aeabi_fsub+0xc6>
 8000324:	e0d2      	b.n	80004cc <__aeabi_fsub+0x26c>
 8000326:	2001      	movs	r0, #1
 8000328:	4460      	add	r0, ip
 800032a:	0143      	lsls	r3, r0, #5
 800032c:	d57a      	bpl.n	8000424 <__aeabi_fsub+0x1c4>
 800032e:	3501      	adds	r5, #1
 8000330:	2dff      	cmp	r5, #255	; 0xff
 8000332:	d06b      	beq.n	800040c <__aeabi_fsub+0x1ac>
 8000334:	2301      	movs	r3, #1
 8000336:	4a9d      	ldr	r2, [pc, #628]	; (80005ac <__aeabi_fsub+0x34c>)
 8000338:	4003      	ands	r3, r0
 800033a:	0840      	lsrs	r0, r0, #1
 800033c:	4010      	ands	r0, r2
 800033e:	4318      	orrs	r0, r3
 8000340:	e7c8      	b.n	80002d4 <__aeabi_fsub+0x74>
 8000342:	2e00      	cmp	r6, #0
 8000344:	d020      	beq.n	8000388 <__aeabi_fsub+0x128>
 8000346:	428c      	cmp	r4, r1
 8000348:	d023      	beq.n	8000392 <__aeabi_fsub+0x132>
 800034a:	0028      	movs	r0, r5
 800034c:	38ff      	subs	r0, #255	; 0xff
 800034e:	2800      	cmp	r0, #0
 8000350:	d039      	beq.n	80003c6 <__aeabi_fsub+0x166>
 8000352:	1b57      	subs	r7, r2, r5
 8000354:	2d00      	cmp	r5, #0
 8000356:	d000      	beq.n	800035a <__aeabi_fsub+0xfa>
 8000358:	e09d      	b.n	8000496 <__aeabi_fsub+0x236>
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d100      	bne.n	8000362 <__aeabi_fsub+0x102>
 8000360:	e0db      	b.n	800051a <__aeabi_fsub+0x2ba>
 8000362:	1e7b      	subs	r3, r7, #1
 8000364:	2f01      	cmp	r7, #1
 8000366:	d100      	bne.n	800036a <__aeabi_fsub+0x10a>
 8000368:	e10d      	b.n	8000586 <__aeabi_fsub+0x326>
 800036a:	2fff      	cmp	r7, #255	; 0xff
 800036c:	d071      	beq.n	8000452 <__aeabi_fsub+0x1f2>
 800036e:	001f      	movs	r7, r3
 8000370:	e098      	b.n	80004a4 <__aeabi_fsub+0x244>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d100      	bne.n	8000378 <__aeabi_fsub+0x118>
 8000376:	e0a7      	b.n	80004c8 <__aeabi_fsub+0x268>
 8000378:	1e42      	subs	r2, r0, #1
 800037a:	2801      	cmp	r0, #1
 800037c:	d100      	bne.n	8000380 <__aeabi_fsub+0x120>
 800037e:	e0e6      	b.n	800054e <__aeabi_fsub+0x2ee>
 8000380:	28ff      	cmp	r0, #255	; 0xff
 8000382:	d068      	beq.n	8000456 <__aeabi_fsub+0x1f6>
 8000384:	0010      	movs	r0, r2
 8000386:	e78f      	b.n	80002a8 <__aeabi_fsub+0x48>
 8000388:	2001      	movs	r0, #1
 800038a:	4041      	eors	r1, r0
 800038c:	42a1      	cmp	r1, r4
 800038e:	d000      	beq.n	8000392 <__aeabi_fsub+0x132>
 8000390:	e77f      	b.n	8000292 <__aeabi_fsub+0x32>
 8000392:	20ff      	movs	r0, #255	; 0xff
 8000394:	4240      	negs	r0, r0
 8000396:	4680      	mov	r8, r0
 8000398:	44a8      	add	r8, r5
 800039a:	4640      	mov	r0, r8
 800039c:	2800      	cmp	r0, #0
 800039e:	d038      	beq.n	8000412 <__aeabi_fsub+0x1b2>
 80003a0:	1b51      	subs	r1, r2, r5
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d100      	bne.n	80003a8 <__aeabi_fsub+0x148>
 80003a6:	e0ae      	b.n	8000506 <__aeabi_fsub+0x2a6>
 80003a8:	2aff      	cmp	r2, #255	; 0xff
 80003aa:	d100      	bne.n	80003ae <__aeabi_fsub+0x14e>
 80003ac:	e0df      	b.n	800056e <__aeabi_fsub+0x30e>
 80003ae:	2380      	movs	r3, #128	; 0x80
 80003b0:	4660      	mov	r0, ip
 80003b2:	04db      	lsls	r3, r3, #19
 80003b4:	4318      	orrs	r0, r3
 80003b6:	4684      	mov	ip, r0
 80003b8:	291b      	cmp	r1, #27
 80003ba:	dc00      	bgt.n	80003be <__aeabi_fsub+0x15e>
 80003bc:	e0d9      	b.n	8000572 <__aeabi_fsub+0x312>
 80003be:	2001      	movs	r0, #1
 80003c0:	0015      	movs	r5, r2
 80003c2:	1980      	adds	r0, r0, r6
 80003c4:	e7b1      	b.n	800032a <__aeabi_fsub+0xca>
 80003c6:	20fe      	movs	r0, #254	; 0xfe
 80003c8:	1c6a      	adds	r2, r5, #1
 80003ca:	4210      	tst	r0, r2
 80003cc:	d171      	bne.n	80004b2 <__aeabi_fsub+0x252>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d000      	beq.n	80003d4 <__aeabi_fsub+0x174>
 80003d2:	e0a6      	b.n	8000522 <__aeabi_fsub+0x2c2>
 80003d4:	4663      	mov	r3, ip
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d100      	bne.n	80003dc <__aeabi_fsub+0x17c>
 80003da:	e0d9      	b.n	8000590 <__aeabi_fsub+0x330>
 80003dc:	2200      	movs	r2, #0
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d100      	bne.n	80003e4 <__aeabi_fsub+0x184>
 80003e2:	e788      	b.n	80002f6 <__aeabi_fsub+0x96>
 80003e4:	1b98      	subs	r0, r3, r6
 80003e6:	0143      	lsls	r3, r0, #5
 80003e8:	d400      	bmi.n	80003ec <__aeabi_fsub+0x18c>
 80003ea:	e0e1      	b.n	80005b0 <__aeabi_fsub+0x350>
 80003ec:	4663      	mov	r3, ip
 80003ee:	000c      	movs	r4, r1
 80003f0:	1af0      	subs	r0, r6, r3
 80003f2:	e76f      	b.n	80002d4 <__aeabi_fsub+0x74>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d100      	bne.n	80003fa <__aeabi_fsub+0x19a>
 80003f8:	e0b7      	b.n	800056a <__aeabi_fsub+0x30a>
 80003fa:	0002      	movs	r2, r0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	2801      	cmp	r0, #1
 8000400:	d100      	bne.n	8000404 <__aeabi_fsub+0x1a4>
 8000402:	e09c      	b.n	800053e <__aeabi_fsub+0x2de>
 8000404:	28ff      	cmp	r0, #255	; 0xff
 8000406:	d026      	beq.n	8000456 <__aeabi_fsub+0x1f6>
 8000408:	4690      	mov	r8, r2
 800040a:	e788      	b.n	800031e <__aeabi_fsub+0xbe>
 800040c:	22ff      	movs	r2, #255	; 0xff
 800040e:	2700      	movs	r7, #0
 8000410:	e771      	b.n	80002f6 <__aeabi_fsub+0x96>
 8000412:	20fe      	movs	r0, #254	; 0xfe
 8000414:	1c6a      	adds	r2, r5, #1
 8000416:	4210      	tst	r0, r2
 8000418:	d064      	beq.n	80004e4 <__aeabi_fsub+0x284>
 800041a:	2aff      	cmp	r2, #255	; 0xff
 800041c:	d0f6      	beq.n	800040c <__aeabi_fsub+0x1ac>
 800041e:	0015      	movs	r5, r2
 8000420:	4466      	add	r6, ip
 8000422:	0870      	lsrs	r0, r6, #1
 8000424:	0743      	lsls	r3, r0, #29
 8000426:	d000      	beq.n	800042a <__aeabi_fsub+0x1ca>
 8000428:	e756      	b.n	80002d8 <__aeabi_fsub+0x78>
 800042a:	08c3      	lsrs	r3, r0, #3
 800042c:	2dff      	cmp	r5, #255	; 0xff
 800042e:	d012      	beq.n	8000456 <__aeabi_fsub+0x1f6>
 8000430:	025b      	lsls	r3, r3, #9
 8000432:	0a5f      	lsrs	r7, r3, #9
 8000434:	b2ea      	uxtb	r2, r5
 8000436:	e75e      	b.n	80002f6 <__aeabi_fsub+0x96>
 8000438:	4662      	mov	r2, ip
 800043a:	2a00      	cmp	r2, #0
 800043c:	d100      	bne.n	8000440 <__aeabi_fsub+0x1e0>
 800043e:	e096      	b.n	800056e <__aeabi_fsub+0x30e>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d008      	beq.n	8000456 <__aeabi_fsub+0x1f6>
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	03d2      	lsls	r2, r2, #15
 8000448:	4213      	tst	r3, r2
 800044a:	d004      	beq.n	8000456 <__aeabi_fsub+0x1f6>
 800044c:	4648      	mov	r0, r9
 800044e:	4210      	tst	r0, r2
 8000450:	d101      	bne.n	8000456 <__aeabi_fsub+0x1f6>
 8000452:	000c      	movs	r4, r1
 8000454:	464b      	mov	r3, r9
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0d8      	beq.n	800040c <__aeabi_fsub+0x1ac>
 800045a:	2780      	movs	r7, #128	; 0x80
 800045c:	03ff      	lsls	r7, r7, #15
 800045e:	431f      	orrs	r7, r3
 8000460:	027f      	lsls	r7, r7, #9
 8000462:	22ff      	movs	r2, #255	; 0xff
 8000464:	0a7f      	lsrs	r7, r7, #9
 8000466:	e746      	b.n	80002f6 <__aeabi_fsub+0x96>
 8000468:	2320      	movs	r3, #32
 800046a:	003a      	movs	r2, r7
 800046c:	1b45      	subs	r5, r0, r5
 800046e:	0038      	movs	r0, r7
 8000470:	3501      	adds	r5, #1
 8000472:	40ea      	lsrs	r2, r5
 8000474:	1b5d      	subs	r5, r3, r5
 8000476:	40a8      	lsls	r0, r5
 8000478:	1e43      	subs	r3, r0, #1
 800047a:	4198      	sbcs	r0, r3
 800047c:	2500      	movs	r5, #0
 800047e:	4310      	orrs	r0, r2
 8000480:	e728      	b.n	80002d4 <__aeabi_fsub+0x74>
 8000482:	2320      	movs	r3, #32
 8000484:	1a1b      	subs	r3, r3, r0
 8000486:	0032      	movs	r2, r6
 8000488:	409e      	lsls	r6, r3
 800048a:	40c2      	lsrs	r2, r0
 800048c:	0030      	movs	r0, r6
 800048e:	1e43      	subs	r3, r0, #1
 8000490:	4198      	sbcs	r0, r3
 8000492:	4310      	orrs	r0, r2
 8000494:	e70c      	b.n	80002b0 <__aeabi_fsub+0x50>
 8000496:	2aff      	cmp	r2, #255	; 0xff
 8000498:	d0db      	beq.n	8000452 <__aeabi_fsub+0x1f2>
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	4660      	mov	r0, ip
 800049e:	04db      	lsls	r3, r3, #19
 80004a0:	4318      	orrs	r0, r3
 80004a2:	4684      	mov	ip, r0
 80004a4:	2f1b      	cmp	r7, #27
 80004a6:	dd56      	ble.n	8000556 <__aeabi_fsub+0x2f6>
 80004a8:	2001      	movs	r0, #1
 80004aa:	000c      	movs	r4, r1
 80004ac:	0015      	movs	r5, r2
 80004ae:	1a30      	subs	r0, r6, r0
 80004b0:	e700      	b.n	80002b4 <__aeabi_fsub+0x54>
 80004b2:	4663      	mov	r3, ip
 80004b4:	1b9f      	subs	r7, r3, r6
 80004b6:	017b      	lsls	r3, r7, #5
 80004b8:	d43d      	bmi.n	8000536 <__aeabi_fsub+0x2d6>
 80004ba:	2f00      	cmp	r7, #0
 80004bc:	d000      	beq.n	80004c0 <__aeabi_fsub+0x260>
 80004be:	e6fe      	b.n	80002be <__aeabi_fsub+0x5e>
 80004c0:	2400      	movs	r4, #0
 80004c2:	2200      	movs	r2, #0
 80004c4:	2700      	movs	r7, #0
 80004c6:	e716      	b.n	80002f6 <__aeabi_fsub+0x96>
 80004c8:	0005      	movs	r5, r0
 80004ca:	e7af      	b.n	800042c <__aeabi_fsub+0x1cc>
 80004cc:	0032      	movs	r2, r6
 80004ce:	4643      	mov	r3, r8
 80004d0:	4641      	mov	r1, r8
 80004d2:	40da      	lsrs	r2, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a5b      	subs	r3, r3, r1
 80004d8:	409e      	lsls	r6, r3
 80004da:	0030      	movs	r0, r6
 80004dc:	1e43      	subs	r3, r0, #1
 80004de:	4198      	sbcs	r0, r3
 80004e0:	4310      	orrs	r0, r2
 80004e2:	e721      	b.n	8000328 <__aeabi_fsub+0xc8>
 80004e4:	2d00      	cmp	r5, #0
 80004e6:	d1a7      	bne.n	8000438 <__aeabi_fsub+0x1d8>
 80004e8:	4663      	mov	r3, ip
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d059      	beq.n	80005a2 <__aeabi_fsub+0x342>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fsub+0x296>
 80004f4:	e6ff      	b.n	80002f6 <__aeabi_fsub+0x96>
 80004f6:	0030      	movs	r0, r6
 80004f8:	4460      	add	r0, ip
 80004fa:	0143      	lsls	r3, r0, #5
 80004fc:	d592      	bpl.n	8000424 <__aeabi_fsub+0x1c4>
 80004fe:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <__aeabi_fsub+0x348>)
 8000500:	3501      	adds	r5, #1
 8000502:	4018      	ands	r0, r3
 8000504:	e78e      	b.n	8000424 <__aeabi_fsub+0x1c4>
 8000506:	4663      	mov	r3, ip
 8000508:	2b00      	cmp	r3, #0
 800050a:	d047      	beq.n	800059c <__aeabi_fsub+0x33c>
 800050c:	1e4b      	subs	r3, r1, #1
 800050e:	2901      	cmp	r1, #1
 8000510:	d015      	beq.n	800053e <__aeabi_fsub+0x2de>
 8000512:	29ff      	cmp	r1, #255	; 0xff
 8000514:	d02b      	beq.n	800056e <__aeabi_fsub+0x30e>
 8000516:	0019      	movs	r1, r3
 8000518:	e74e      	b.n	80003b8 <__aeabi_fsub+0x158>
 800051a:	000c      	movs	r4, r1
 800051c:	464b      	mov	r3, r9
 800051e:	003d      	movs	r5, r7
 8000520:	e784      	b.n	800042c <__aeabi_fsub+0x1cc>
 8000522:	4662      	mov	r2, ip
 8000524:	2a00      	cmp	r2, #0
 8000526:	d18b      	bne.n	8000440 <__aeabi_fsub+0x1e0>
 8000528:	2e00      	cmp	r6, #0
 800052a:	d192      	bne.n	8000452 <__aeabi_fsub+0x1f2>
 800052c:	2780      	movs	r7, #128	; 0x80
 800052e:	2400      	movs	r4, #0
 8000530:	22ff      	movs	r2, #255	; 0xff
 8000532:	03ff      	lsls	r7, r7, #15
 8000534:	e6df      	b.n	80002f6 <__aeabi_fsub+0x96>
 8000536:	4663      	mov	r3, ip
 8000538:	000c      	movs	r4, r1
 800053a:	1af7      	subs	r7, r6, r3
 800053c:	e6bf      	b.n	80002be <__aeabi_fsub+0x5e>
 800053e:	0030      	movs	r0, r6
 8000540:	4460      	add	r0, ip
 8000542:	2501      	movs	r5, #1
 8000544:	0143      	lsls	r3, r0, #5
 8000546:	d400      	bmi.n	800054a <__aeabi_fsub+0x2ea>
 8000548:	e76c      	b.n	8000424 <__aeabi_fsub+0x1c4>
 800054a:	2502      	movs	r5, #2
 800054c:	e6f2      	b.n	8000334 <__aeabi_fsub+0xd4>
 800054e:	4663      	mov	r3, ip
 8000550:	2501      	movs	r5, #1
 8000552:	1b98      	subs	r0, r3, r6
 8000554:	e6ae      	b.n	80002b4 <__aeabi_fsub+0x54>
 8000556:	2320      	movs	r3, #32
 8000558:	4664      	mov	r4, ip
 800055a:	4660      	mov	r0, ip
 800055c:	40fc      	lsrs	r4, r7
 800055e:	1bdf      	subs	r7, r3, r7
 8000560:	40b8      	lsls	r0, r7
 8000562:	1e43      	subs	r3, r0, #1
 8000564:	4198      	sbcs	r0, r3
 8000566:	4320      	orrs	r0, r4
 8000568:	e79f      	b.n	80004aa <__aeabi_fsub+0x24a>
 800056a:	0005      	movs	r5, r0
 800056c:	e75e      	b.n	800042c <__aeabi_fsub+0x1cc>
 800056e:	464b      	mov	r3, r9
 8000570:	e771      	b.n	8000456 <__aeabi_fsub+0x1f6>
 8000572:	2320      	movs	r3, #32
 8000574:	4665      	mov	r5, ip
 8000576:	4660      	mov	r0, ip
 8000578:	40cd      	lsrs	r5, r1
 800057a:	1a59      	subs	r1, r3, r1
 800057c:	4088      	lsls	r0, r1
 800057e:	1e43      	subs	r3, r0, #1
 8000580:	4198      	sbcs	r0, r3
 8000582:	4328      	orrs	r0, r5
 8000584:	e71c      	b.n	80003c0 <__aeabi_fsub+0x160>
 8000586:	4663      	mov	r3, ip
 8000588:	000c      	movs	r4, r1
 800058a:	2501      	movs	r5, #1
 800058c:	1af0      	subs	r0, r6, r3
 800058e:	e691      	b.n	80002b4 <__aeabi_fsub+0x54>
 8000590:	2e00      	cmp	r6, #0
 8000592:	d095      	beq.n	80004c0 <__aeabi_fsub+0x260>
 8000594:	000c      	movs	r4, r1
 8000596:	464f      	mov	r7, r9
 8000598:	2200      	movs	r2, #0
 800059a:	e6ac      	b.n	80002f6 <__aeabi_fsub+0x96>
 800059c:	464b      	mov	r3, r9
 800059e:	000d      	movs	r5, r1
 80005a0:	e744      	b.n	800042c <__aeabi_fsub+0x1cc>
 80005a2:	464f      	mov	r7, r9
 80005a4:	2200      	movs	r2, #0
 80005a6:	e6a6      	b.n	80002f6 <__aeabi_fsub+0x96>
 80005a8:	fbffffff 	.word	0xfbffffff
 80005ac:	7dffffff 	.word	0x7dffffff
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d000      	beq.n	80005b6 <__aeabi_fsub+0x356>
 80005b4:	e736      	b.n	8000424 <__aeabi_fsub+0x1c4>
 80005b6:	2400      	movs	r4, #0
 80005b8:	2700      	movs	r7, #0
 80005ba:	e69c      	b.n	80002f6 <__aeabi_fsub+0x96>

080005bc <__aeabi_f2iz>:
 80005bc:	0241      	lsls	r1, r0, #9
 80005be:	0042      	lsls	r2, r0, #1
 80005c0:	0fc3      	lsrs	r3, r0, #31
 80005c2:	0a49      	lsrs	r1, r1, #9
 80005c4:	2000      	movs	r0, #0
 80005c6:	0e12      	lsrs	r2, r2, #24
 80005c8:	2a7e      	cmp	r2, #126	; 0x7e
 80005ca:	dd03      	ble.n	80005d4 <__aeabi_f2iz+0x18>
 80005cc:	2a9d      	cmp	r2, #157	; 0x9d
 80005ce:	dd02      	ble.n	80005d6 <__aeabi_f2iz+0x1a>
 80005d0:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <__aeabi_f2iz+0x3c>)
 80005d2:	1898      	adds	r0, r3, r2
 80005d4:	4770      	bx	lr
 80005d6:	2080      	movs	r0, #128	; 0x80
 80005d8:	0400      	lsls	r0, r0, #16
 80005da:	4301      	orrs	r1, r0
 80005dc:	2a95      	cmp	r2, #149	; 0x95
 80005de:	dc07      	bgt.n	80005f0 <__aeabi_f2iz+0x34>
 80005e0:	2096      	movs	r0, #150	; 0x96
 80005e2:	1a82      	subs	r2, r0, r2
 80005e4:	40d1      	lsrs	r1, r2
 80005e6:	4248      	negs	r0, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f3      	bne.n	80005d4 <__aeabi_f2iz+0x18>
 80005ec:	0008      	movs	r0, r1
 80005ee:	e7f1      	b.n	80005d4 <__aeabi_f2iz+0x18>
 80005f0:	3a96      	subs	r2, #150	; 0x96
 80005f2:	4091      	lsls	r1, r2
 80005f4:	e7f7      	b.n	80005e6 <__aeabi_f2iz+0x2a>
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	7fffffff 	.word	0x7fffffff

080005fc <__aeabi_ui2f>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	1e05      	subs	r5, r0, #0
 8000600:	d00e      	beq.n	8000620 <__aeabi_ui2f+0x24>
 8000602:	f000 f877 	bl	80006f4 <__clzsi2>
 8000606:	239e      	movs	r3, #158	; 0x9e
 8000608:	0004      	movs	r4, r0
 800060a:	1a1b      	subs	r3, r3, r0
 800060c:	2b96      	cmp	r3, #150	; 0x96
 800060e:	dc0c      	bgt.n	800062a <__aeabi_ui2f+0x2e>
 8000610:	2808      	cmp	r0, #8
 8000612:	dd01      	ble.n	8000618 <__aeabi_ui2f+0x1c>
 8000614:	3c08      	subs	r4, #8
 8000616:	40a5      	lsls	r5, r4
 8000618:	026d      	lsls	r5, r5, #9
 800061a:	0a6d      	lsrs	r5, r5, #9
 800061c:	b2d8      	uxtb	r0, r3
 800061e:	e001      	b.n	8000624 <__aeabi_ui2f+0x28>
 8000620:	2000      	movs	r0, #0
 8000622:	2500      	movs	r5, #0
 8000624:	05c0      	lsls	r0, r0, #23
 8000626:	4328      	orrs	r0, r5
 8000628:	bd70      	pop	{r4, r5, r6, pc}
 800062a:	2b99      	cmp	r3, #153	; 0x99
 800062c:	dd09      	ble.n	8000642 <__aeabi_ui2f+0x46>
 800062e:	0002      	movs	r2, r0
 8000630:	0029      	movs	r1, r5
 8000632:	321b      	adds	r2, #27
 8000634:	4091      	lsls	r1, r2
 8000636:	1e4a      	subs	r2, r1, #1
 8000638:	4191      	sbcs	r1, r2
 800063a:	2205      	movs	r2, #5
 800063c:	1a12      	subs	r2, r2, r0
 800063e:	40d5      	lsrs	r5, r2
 8000640:	430d      	orrs	r5, r1
 8000642:	2c05      	cmp	r4, #5
 8000644:	dc12      	bgt.n	800066c <__aeabi_ui2f+0x70>
 8000646:	0029      	movs	r1, r5
 8000648:	4e0c      	ldr	r6, [pc, #48]	; (800067c <__aeabi_ui2f+0x80>)
 800064a:	4031      	ands	r1, r6
 800064c:	076a      	lsls	r2, r5, #29
 800064e:	d009      	beq.n	8000664 <__aeabi_ui2f+0x68>
 8000650:	200f      	movs	r0, #15
 8000652:	4028      	ands	r0, r5
 8000654:	2804      	cmp	r0, #4
 8000656:	d005      	beq.n	8000664 <__aeabi_ui2f+0x68>
 8000658:	3104      	adds	r1, #4
 800065a:	014a      	lsls	r2, r1, #5
 800065c:	d502      	bpl.n	8000664 <__aeabi_ui2f+0x68>
 800065e:	239f      	movs	r3, #159	; 0x9f
 8000660:	4031      	ands	r1, r6
 8000662:	1b1b      	subs	r3, r3, r4
 8000664:	0189      	lsls	r1, r1, #6
 8000666:	0a4d      	lsrs	r5, r1, #9
 8000668:	b2d8      	uxtb	r0, r3
 800066a:	e7db      	b.n	8000624 <__aeabi_ui2f+0x28>
 800066c:	1f62      	subs	r2, r4, #5
 800066e:	4095      	lsls	r5, r2
 8000670:	0029      	movs	r1, r5
 8000672:	4e02      	ldr	r6, [pc, #8]	; (800067c <__aeabi_ui2f+0x80>)
 8000674:	4031      	ands	r1, r6
 8000676:	076a      	lsls	r2, r5, #29
 8000678:	d0f4      	beq.n	8000664 <__aeabi_ui2f+0x68>
 800067a:	e7e9      	b.n	8000650 <__aeabi_ui2f+0x54>
 800067c:	fbffffff 	.word	0xfbffffff

08000680 <__aeabi_cfrcmple>:
 8000680:	4684      	mov	ip, r0
 8000682:	0008      	movs	r0, r1
 8000684:	4661      	mov	r1, ip
 8000686:	e7ff      	b.n	8000688 <__aeabi_cfcmpeq>

08000688 <__aeabi_cfcmpeq>:
 8000688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800068a:	f000 f8bd 	bl	8000808 <__lesf2>
 800068e:	2800      	cmp	r0, #0
 8000690:	d401      	bmi.n	8000696 <__aeabi_cfcmpeq+0xe>
 8000692:	2100      	movs	r1, #0
 8000694:	42c8      	cmn	r0, r1
 8000696:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000698 <__aeabi_fcmpeq>:
 8000698:	b510      	push	{r4, lr}
 800069a:	f000 f849 	bl	8000730 <__eqsf2>
 800069e:	4240      	negs	r0, r0
 80006a0:	3001      	adds	r0, #1
 80006a2:	bd10      	pop	{r4, pc}

080006a4 <__aeabi_fcmplt>:
 80006a4:	b510      	push	{r4, lr}
 80006a6:	f000 f8af 	bl	8000808 <__lesf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	db01      	blt.n	80006b2 <__aeabi_fcmplt+0xe>
 80006ae:	2000      	movs	r0, #0
 80006b0:	bd10      	pop	{r4, pc}
 80006b2:	2001      	movs	r0, #1
 80006b4:	bd10      	pop	{r4, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)

080006b8 <__aeabi_fcmple>:
 80006b8:	b510      	push	{r4, lr}
 80006ba:	f000 f8a5 	bl	8000808 <__lesf2>
 80006be:	2800      	cmp	r0, #0
 80006c0:	dd01      	ble.n	80006c6 <__aeabi_fcmple+0xe>
 80006c2:	2000      	movs	r0, #0
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	2001      	movs	r0, #1
 80006c8:	bd10      	pop	{r4, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)

080006cc <__aeabi_fcmpgt>:
 80006cc:	b510      	push	{r4, lr}
 80006ce:	f000 f855 	bl	800077c <__gesf2>
 80006d2:	2800      	cmp	r0, #0
 80006d4:	dc01      	bgt.n	80006da <__aeabi_fcmpgt+0xe>
 80006d6:	2000      	movs	r0, #0
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	2001      	movs	r0, #1
 80006dc:	bd10      	pop	{r4, pc}
 80006de:	46c0      	nop			; (mov r8, r8)

080006e0 <__aeabi_fcmpge>:
 80006e0:	b510      	push	{r4, lr}
 80006e2:	f000 f84b 	bl	800077c <__gesf2>
 80006e6:	2800      	cmp	r0, #0
 80006e8:	da01      	bge.n	80006ee <__aeabi_fcmpge+0xe>
 80006ea:	2000      	movs	r0, #0
 80006ec:	bd10      	pop	{r4, pc}
 80006ee:	2001      	movs	r0, #1
 80006f0:	bd10      	pop	{r4, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)

080006f4 <__clzsi2>:
 80006f4:	211c      	movs	r1, #28
 80006f6:	2301      	movs	r3, #1
 80006f8:	041b      	lsls	r3, r3, #16
 80006fa:	4298      	cmp	r0, r3
 80006fc:	d301      	bcc.n	8000702 <__clzsi2+0xe>
 80006fe:	0c00      	lsrs	r0, r0, #16
 8000700:	3910      	subs	r1, #16
 8000702:	0a1b      	lsrs	r3, r3, #8
 8000704:	4298      	cmp	r0, r3
 8000706:	d301      	bcc.n	800070c <__clzsi2+0x18>
 8000708:	0a00      	lsrs	r0, r0, #8
 800070a:	3908      	subs	r1, #8
 800070c:	091b      	lsrs	r3, r3, #4
 800070e:	4298      	cmp	r0, r3
 8000710:	d301      	bcc.n	8000716 <__clzsi2+0x22>
 8000712:	0900      	lsrs	r0, r0, #4
 8000714:	3904      	subs	r1, #4
 8000716:	a202      	add	r2, pc, #8	; (adr r2, 8000720 <__clzsi2+0x2c>)
 8000718:	5c10      	ldrb	r0, [r2, r0]
 800071a:	1840      	adds	r0, r0, r1
 800071c:	4770      	bx	lr
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	02020304 	.word	0x02020304
 8000724:	01010101 	.word	0x01010101
	...

08000730 <__eqsf2>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	0042      	lsls	r2, r0, #1
 8000734:	0245      	lsls	r5, r0, #9
 8000736:	024e      	lsls	r6, r1, #9
 8000738:	004c      	lsls	r4, r1, #1
 800073a:	0fc3      	lsrs	r3, r0, #31
 800073c:	0a6d      	lsrs	r5, r5, #9
 800073e:	2001      	movs	r0, #1
 8000740:	0e12      	lsrs	r2, r2, #24
 8000742:	0a76      	lsrs	r6, r6, #9
 8000744:	0e24      	lsrs	r4, r4, #24
 8000746:	0fc9      	lsrs	r1, r1, #31
 8000748:	2aff      	cmp	r2, #255	; 0xff
 800074a:	d006      	beq.n	800075a <__eqsf2+0x2a>
 800074c:	2cff      	cmp	r4, #255	; 0xff
 800074e:	d003      	beq.n	8000758 <__eqsf2+0x28>
 8000750:	42a2      	cmp	r2, r4
 8000752:	d101      	bne.n	8000758 <__eqsf2+0x28>
 8000754:	42b5      	cmp	r5, r6
 8000756:	d006      	beq.n	8000766 <__eqsf2+0x36>
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	2d00      	cmp	r5, #0
 800075c:	d1fc      	bne.n	8000758 <__eqsf2+0x28>
 800075e:	2cff      	cmp	r4, #255	; 0xff
 8000760:	d1fa      	bne.n	8000758 <__eqsf2+0x28>
 8000762:	2e00      	cmp	r6, #0
 8000764:	d1f8      	bne.n	8000758 <__eqsf2+0x28>
 8000766:	428b      	cmp	r3, r1
 8000768:	d006      	beq.n	8000778 <__eqsf2+0x48>
 800076a:	2001      	movs	r0, #1
 800076c:	2a00      	cmp	r2, #0
 800076e:	d1f3      	bne.n	8000758 <__eqsf2+0x28>
 8000770:	0028      	movs	r0, r5
 8000772:	1e43      	subs	r3, r0, #1
 8000774:	4198      	sbcs	r0, r3
 8000776:	e7ef      	b.n	8000758 <__eqsf2+0x28>
 8000778:	2000      	movs	r0, #0
 800077a:	e7ed      	b.n	8000758 <__eqsf2+0x28>

0800077c <__gesf2>:
 800077c:	b570      	push	{r4, r5, r6, lr}
 800077e:	0042      	lsls	r2, r0, #1
 8000780:	0245      	lsls	r5, r0, #9
 8000782:	024e      	lsls	r6, r1, #9
 8000784:	004c      	lsls	r4, r1, #1
 8000786:	0fc3      	lsrs	r3, r0, #31
 8000788:	0a6d      	lsrs	r5, r5, #9
 800078a:	0e12      	lsrs	r2, r2, #24
 800078c:	0a76      	lsrs	r6, r6, #9
 800078e:	0e24      	lsrs	r4, r4, #24
 8000790:	0fc8      	lsrs	r0, r1, #31
 8000792:	2aff      	cmp	r2, #255	; 0xff
 8000794:	d01b      	beq.n	80007ce <__gesf2+0x52>
 8000796:	2cff      	cmp	r4, #255	; 0xff
 8000798:	d00e      	beq.n	80007b8 <__gesf2+0x3c>
 800079a:	2a00      	cmp	r2, #0
 800079c:	d11b      	bne.n	80007d6 <__gesf2+0x5a>
 800079e:	2c00      	cmp	r4, #0
 80007a0:	d101      	bne.n	80007a6 <__gesf2+0x2a>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d01c      	beq.n	80007e0 <__gesf2+0x64>
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d00c      	beq.n	80007c4 <__gesf2+0x48>
 80007aa:	4283      	cmp	r3, r0
 80007ac:	d01c      	beq.n	80007e8 <__gesf2+0x6c>
 80007ae:	2102      	movs	r1, #2
 80007b0:	1e58      	subs	r0, r3, #1
 80007b2:	4008      	ands	r0, r1
 80007b4:	3801      	subs	r0, #1
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	2e00      	cmp	r6, #0
 80007ba:	d122      	bne.n	8000802 <__gesf2+0x86>
 80007bc:	2a00      	cmp	r2, #0
 80007be:	d1f4      	bne.n	80007aa <__gesf2+0x2e>
 80007c0:	2d00      	cmp	r5, #0
 80007c2:	d1f2      	bne.n	80007aa <__gesf2+0x2e>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d1f6      	bne.n	80007b6 <__gesf2+0x3a>
 80007c8:	2001      	movs	r0, #1
 80007ca:	4240      	negs	r0, r0
 80007cc:	e7f3      	b.n	80007b6 <__gesf2+0x3a>
 80007ce:	2d00      	cmp	r5, #0
 80007d0:	d117      	bne.n	8000802 <__gesf2+0x86>
 80007d2:	2cff      	cmp	r4, #255	; 0xff
 80007d4:	d0f0      	beq.n	80007b8 <__gesf2+0x3c>
 80007d6:	2c00      	cmp	r4, #0
 80007d8:	d1e7      	bne.n	80007aa <__gesf2+0x2e>
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d1e5      	bne.n	80007aa <__gesf2+0x2e>
 80007de:	e7e6      	b.n	80007ae <__gesf2+0x32>
 80007e0:	2000      	movs	r0, #0
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d0e7      	beq.n	80007b6 <__gesf2+0x3a>
 80007e6:	e7e2      	b.n	80007ae <__gesf2+0x32>
 80007e8:	42a2      	cmp	r2, r4
 80007ea:	dc05      	bgt.n	80007f8 <__gesf2+0x7c>
 80007ec:	dbea      	blt.n	80007c4 <__gesf2+0x48>
 80007ee:	42b5      	cmp	r5, r6
 80007f0:	d802      	bhi.n	80007f8 <__gesf2+0x7c>
 80007f2:	d3e7      	bcc.n	80007c4 <__gesf2+0x48>
 80007f4:	2000      	movs	r0, #0
 80007f6:	e7de      	b.n	80007b6 <__gesf2+0x3a>
 80007f8:	4243      	negs	r3, r0
 80007fa:	4158      	adcs	r0, r3
 80007fc:	0040      	lsls	r0, r0, #1
 80007fe:	3801      	subs	r0, #1
 8000800:	e7d9      	b.n	80007b6 <__gesf2+0x3a>
 8000802:	2002      	movs	r0, #2
 8000804:	4240      	negs	r0, r0
 8000806:	e7d6      	b.n	80007b6 <__gesf2+0x3a>

08000808 <__lesf2>:
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	0042      	lsls	r2, r0, #1
 800080c:	0245      	lsls	r5, r0, #9
 800080e:	024e      	lsls	r6, r1, #9
 8000810:	004c      	lsls	r4, r1, #1
 8000812:	0fc3      	lsrs	r3, r0, #31
 8000814:	0a6d      	lsrs	r5, r5, #9
 8000816:	0e12      	lsrs	r2, r2, #24
 8000818:	0a76      	lsrs	r6, r6, #9
 800081a:	0e24      	lsrs	r4, r4, #24
 800081c:	0fc8      	lsrs	r0, r1, #31
 800081e:	2aff      	cmp	r2, #255	; 0xff
 8000820:	d00b      	beq.n	800083a <__lesf2+0x32>
 8000822:	2cff      	cmp	r4, #255	; 0xff
 8000824:	d00d      	beq.n	8000842 <__lesf2+0x3a>
 8000826:	2a00      	cmp	r2, #0
 8000828:	d11f      	bne.n	800086a <__lesf2+0x62>
 800082a:	2c00      	cmp	r4, #0
 800082c:	d116      	bne.n	800085c <__lesf2+0x54>
 800082e:	2e00      	cmp	r6, #0
 8000830:	d114      	bne.n	800085c <__lesf2+0x54>
 8000832:	2000      	movs	r0, #0
 8000834:	2d00      	cmp	r5, #0
 8000836:	d010      	beq.n	800085a <__lesf2+0x52>
 8000838:	e009      	b.n	800084e <__lesf2+0x46>
 800083a:	2d00      	cmp	r5, #0
 800083c:	d10c      	bne.n	8000858 <__lesf2+0x50>
 800083e:	2cff      	cmp	r4, #255	; 0xff
 8000840:	d113      	bne.n	800086a <__lesf2+0x62>
 8000842:	2e00      	cmp	r6, #0
 8000844:	d108      	bne.n	8000858 <__lesf2+0x50>
 8000846:	2a00      	cmp	r2, #0
 8000848:	d008      	beq.n	800085c <__lesf2+0x54>
 800084a:	4283      	cmp	r3, r0
 800084c:	d012      	beq.n	8000874 <__lesf2+0x6c>
 800084e:	2102      	movs	r1, #2
 8000850:	1e58      	subs	r0, r3, #1
 8000852:	4008      	ands	r0, r1
 8000854:	3801      	subs	r0, #1
 8000856:	e000      	b.n	800085a <__lesf2+0x52>
 8000858:	2002      	movs	r0, #2
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	2d00      	cmp	r5, #0
 800085e:	d1f4      	bne.n	800084a <__lesf2+0x42>
 8000860:	2800      	cmp	r0, #0
 8000862:	d1fa      	bne.n	800085a <__lesf2+0x52>
 8000864:	2001      	movs	r0, #1
 8000866:	4240      	negs	r0, r0
 8000868:	e7f7      	b.n	800085a <__lesf2+0x52>
 800086a:	2c00      	cmp	r4, #0
 800086c:	d1ed      	bne.n	800084a <__lesf2+0x42>
 800086e:	2e00      	cmp	r6, #0
 8000870:	d1eb      	bne.n	800084a <__lesf2+0x42>
 8000872:	e7ec      	b.n	800084e <__lesf2+0x46>
 8000874:	42a2      	cmp	r2, r4
 8000876:	dc05      	bgt.n	8000884 <__lesf2+0x7c>
 8000878:	dbf2      	blt.n	8000860 <__lesf2+0x58>
 800087a:	42b5      	cmp	r5, r6
 800087c:	d802      	bhi.n	8000884 <__lesf2+0x7c>
 800087e:	d3ef      	bcc.n	8000860 <__lesf2+0x58>
 8000880:	2000      	movs	r0, #0
 8000882:	e7ea      	b.n	800085a <__lesf2+0x52>
 8000884:	4243      	negs	r3, r0
 8000886:	4158      	adcs	r0, r3
 8000888:	0040      	lsls	r0, r0, #1
 800088a:	3801      	subs	r0, #1
 800088c:	e7e5      	b.n	800085a <__lesf2+0x52>
 800088e:	46c0      	nop			; (mov r8, r8)

08000890 <Set_Pin_Output>:
#include <dht11.h>



void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	000a      	movs	r2, r1
 800089a:	1cbb      	adds	r3, r7, #2
 800089c:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	240c      	movs	r4, #12
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	0018      	movs	r0, r3
 80008a4:	2314      	movs	r3, #20
 80008a6:	001a      	movs	r2, r3
 80008a8:	2100      	movs	r1, #0
 80008aa:	f002 fb15 	bl	8002ed8 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 80008ae:	1cbb      	adds	r3, r7, #2
 80008b0:	881a      	ldrh	r2, [r3, #0]
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2201      	movs	r2, #1
 80008ba:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80008c2:	193a      	adds	r2, r7, r4
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fd4d 	bl	8001368 <HAL_GPIO_Init>
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b009      	add	sp, #36	; 0x24
 80008d4:	bd90      	pop	{r4, r7, pc}

080008d6 <Set_Pin_Input>:
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80008d6:	b590      	push	{r4, r7, lr}
 80008d8:	b089      	sub	sp, #36	; 0x24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	000a      	movs	r2, r1
 80008e0:	1cbb      	adds	r3, r7, #2
 80008e2:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	240c      	movs	r4, #12
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	0018      	movs	r0, r3
 80008ea:	2314      	movs	r3, #20
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f002 faf2 	bl	8002ed8 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 80008f4:	1cbb      	adds	r3, r7, #2
 80008f6:	881a      	ldrh	r2, [r3, #0]
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000908:	193a      	adds	r2, r7, r4
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fd2a 	bl	8001368 <HAL_GPIO_Init>
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b009      	add	sp, #36	; 0x24
 800091a:	bd90      	pop	{r4, r7, pc}

0800091c <delay_us>:
void delay_us (uint16_t us,TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	1dbb      	adds	r3, r7, #6
 8000928:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(htim,0);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htim) < us);
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800093a:	1dbb      	adds	r3, r7, #6
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	429a      	cmp	r2, r3
 8000940:	d3f8      	bcc.n	8000934 <delay_us+0x18>
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b002      	add	sp, #8
 800094a:	bd80      	pop	{r7, pc}

0800094c <DHT_Init>:
void DHT_Init (DHT_DataTypedef *DHT_Data, TIM_HandleTypeDef *_htim){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	DHT_Data->htim = _htim;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	601a      	str	r2, [r3, #0]
	DHT_Data->Temperature = 25;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a06      	ldr	r2, [pc, #24]	; (8000978 <DHT_Init+0x2c>)
 8000960:	605a      	str	r2, [r3, #4]
	DHT_Data->Humidity = 55;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a05      	ldr	r2, [pc, #20]	; (800097c <DHT_Init+0x30>)
 8000966:	609a      	str	r2, [r3, #8]
	DHT_Data->Response = 0;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	749a      	strb	r2, [r3, #18]

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	41c80000 	.word	0x41c80000
 800097c:	425c0000 	.word	0x425c0000

08000980 <DHT_Start>:
void DHT_Start (TIM_HandleTypeDef *htim)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000988:	2390      	movs	r3, #144	; 0x90
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	2102      	movs	r1, #2
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff ff7e 	bl	8000890 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000994:	2390      	movs	r3, #144	; 0x90
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	2200      	movs	r2, #0
 800099a:	2102      	movs	r1, #2
 800099c:	0018      	movs	r0, r3
 800099e:	f000 fe78 	bl	8001692 <HAL_GPIO_WritePin>


	delay_us(18000,htim);   // wait for 18ms
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <DHT_Start+0x5c>)
 80009a6:	0019      	movs	r1, r3
 80009a8:	0010      	movs	r0, r2
 80009aa:	f7ff ffb7 	bl	800091c <delay_us>
    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80009ae:	2390      	movs	r3, #144	; 0x90
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	2201      	movs	r2, #1
 80009b4:	2102      	movs	r1, #2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fe6b 	bl	8001692 <HAL_GPIO_WritePin>
    delay_us(20,htim);   // wait for 30us
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	0019      	movs	r1, r3
 80009c0:	2014      	movs	r0, #20
 80009c2:	f7ff ffab 	bl	800091c <delay_us>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80009c6:	2390      	movs	r3, #144	; 0x90
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	2102      	movs	r1, #2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ff82 	bl	80008d6 <Set_Pin_Input>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	00004650 	.word	0x00004650

080009e0 <DHT_Check_Response>:
uint8_t DHT_Check_Response (TIM_HandleTypeDef *htim)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	uint8_t _Response = 0;
 80009e8:	240f      	movs	r4, #15
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
	delay_us(40,htim);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	0019      	movs	r1, r3
 80009f4:	2028      	movs	r0, #40	; 0x28
 80009f6:	f7ff ff91 	bl	800091c <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80009fa:	2390      	movs	r3, #144	; 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	2102      	movs	r1, #2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fe29 	bl	8001658 <HAL_GPIO_ReadPin>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d114      	bne.n	8000a34 <DHT_Check_Response+0x54>
	{
		delay_us(80,htim);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	2050      	movs	r0, #80	; 0x50
 8000a10:	f7ff ff84 	bl	800091c <delay_us>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) _Response = 1;
 8000a14:	2390      	movs	r3, #144	; 0x90
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	2102      	movs	r1, #2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fe1c 	bl	8001658 <HAL_GPIO_ReadPin>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d003      	beq.n	8000a2c <DHT_Check_Response+0x4c>
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e003      	b.n	8000a34 <DHT_Check_Response+0x54>
		else _Response = -1;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	22ff      	movs	r2, #255	; 0xff
 8000a32:	701a      	strb	r2, [r3, #0]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	2390      	movs	r3, #144	; 0x90
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fe0b 	bl	8001658 <HAL_GPIO_ReadPin>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d1f7      	bne.n	8000a36 <DHT_Check_Response+0x56>

	return _Response;
 8000a46:	230f      	movs	r3, #15
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	781b      	ldrb	r3, [r3, #0]
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b005      	add	sp, #20
 8000a52:	bd90      	pop	{r4, r7, pc}

08000a54 <DHT_Read>:
uint8_t DHT_Read (TIM_HandleTypeDef *htim)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000a5c:	230e      	movs	r3, #14
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	e049      	b.n	8000afa <DHT_Read+0xa6>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	2390      	movs	r3, #144	; 0x90
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 fdf2 	bl	8001658 <HAL_GPIO_ReadPin>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d0f7      	beq.n	8000a68 <DHT_Read+0x14>
		delay_us(40,htim);   // wait for 40 us
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	2028      	movs	r0, #40	; 0x28
 8000a7e:	f7ff ff4d 	bl	800091c <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000a82:	2390      	movs	r3, #144	; 0x90
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	2102      	movs	r1, #2
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 fde5 	bl	8001658 <HAL_GPIO_ReadPin>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d113      	bne.n	8000aba <DHT_Read+0x66>
		{
			i&= ~(1<<(7-j));   // write 0
 8000a92:	230e      	movs	r3, #14
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2207      	movs	r2, #7
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	b25b      	sxtb	r3, r3
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	187a      	adds	r2, r7, r1
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	b252      	sxtb	r2, r2
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	b25a      	sxtb	r2, r3
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	e010      	b.n	8000adc <DHT_Read+0x88>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000aba:	230e      	movs	r3, #14
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	0013      	movs	r3, r2
 8000aca:	b25a      	sxtb	r2, r3
 8000acc:	210f      	movs	r1, #15
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b25a      	sxtb	r2, r3
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	701a      	strb	r2, [r3, #0]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	2390      	movs	r3, #144	; 0x90
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 fdb7 	bl	8001658 <HAL_GPIO_ReadPin>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d1f7      	bne.n	8000ade <DHT_Read+0x8a>
	for (j=0;j<8;j++)
 8000aee:	210e      	movs	r1, #14
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	3201      	adds	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	230e      	movs	r3, #14
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	d9b0      	bls.n	8000a66 <DHT_Read+0x12>
	}
	return i;
 8000b04:	230f      	movs	r3, #15
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	781b      	ldrb	r3, [r3, #0]
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <DHT_GetData>:

uint8_t DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
    DHT_Start (DHT_Data->htim);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff ff2e 	bl	8000980 <DHT_Start>
	DHT_Data->Response = DHT_Check_Response (DHT_Data->htim);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff ff59 	bl	80009e0 <DHT_Check_Response>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	001a      	movs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	749a      	strb	r2, [r3, #18]
	DHT_Data->Rh_byte1 = DHT_Read (DHT_Data->htim);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f7ff ff8a 	bl	8000a54 <DHT_Read>
 8000b40:	0003      	movs	r3, r0
 8000b42:	001a      	movs	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	731a      	strb	r2, [r3, #12]
	DHT_Data->Rh_byte2 = DHT_Read (DHT_Data->htim);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff ff81 	bl	8000a54 <DHT_Read>
 8000b52:	0003      	movs	r3, r0
 8000b54:	001a      	movs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	735a      	strb	r2, [r3, #13]
	DHT_Data->Temp_byte1 = DHT_Read (DHT_Data->htim);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff ff78 	bl	8000a54 <DHT_Read>
 8000b64:	0003      	movs	r3, r0
 8000b66:	001a      	movs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	739a      	strb	r2, [r3, #14]
	DHT_Data->Temp_byte2 = DHT_Read (DHT_Data->htim);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff ff6f 	bl	8000a54 <DHT_Read>
 8000b76:	0003      	movs	r3, r0
 8000b78:	001a      	movs	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	73da      	strb	r2, [r3, #15]
	DHT_Data->SUM = DHT_Read(DHT_Data->htim);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff ff66 	bl	8000a54 <DHT_Read>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	821a      	strh	r2, [r3, #16]

	if (DHT_Data->SUM == (DHT_Data->Rh_byte1+DHT_Data->Rh_byte2+DHT_Data->Temp_byte1+DHT_Data->Temp_byte2))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	8a1b      	ldrh	r3, [r3, #16]
 8000b94:	0019      	movs	r1, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7b1b      	ldrb	r3, [r3, #12]
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7b5b      	ldrb	r3, [r3, #13]
 8000ba0:	18d3      	adds	r3, r2, r3
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	7b92      	ldrb	r2, [r2, #14]
 8000ba6:	189b      	adds	r3, r3, r2
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	7bd2      	ldrb	r2, [r2, #15]
 8000bac:	189b      	adds	r3, r3, r2
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	d111      	bne.n	8000bd6 <DHT_GetData+0xc4>
	{
	//	#if defined(TYPE_DHT11)
			DHT_Data->Temperature = DHT_Data->Temp_byte1;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7b9b      	ldrb	r3, [r3, #14]
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f7ff fd20 	bl	80005fc <__aeabi_ui2f>
 8000bbc:	1c02      	adds	r2, r0, #0
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	605a      	str	r2, [r3, #4]
			DHT_Data->Humidity = DHT_Data->Rh_byte1;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7b1b      	ldrb	r3, [r3, #12]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fd18 	bl	80005fc <__aeabi_ui2f>
 8000bcc:	1c02      	adds	r2, r0, #0
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
//		#if defined(TYPE_DHT22)
//			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
//			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
//		#endif

		return 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <DHT_GetData+0xc6>
	}
	else return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be6:	f000 fa83 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bea:	f000 f849 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f000 f901 	bl	8000df4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf2:	f000 f8cf 	bl	8000d94 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000bf6:	f000 f8a5 	bl	8000d44 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim17);
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <main+0x8c>)
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f001 fbd1 	bl	80023a4 <HAL_TIM_Base_Start>
  DHT_Init(&hdht, &htim17);
 8000c02:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <main+0x8c>)
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <main+0x90>)
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fe9f 	bl	800094c <DHT_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DHT_GetData(&hdht);
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <main+0x90>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff ff7e 	bl	8000b12 <DHT_GetData>
	  uint8_t temperature =(uint8_t) hdht.Temperature;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <main+0x90>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	251f      	movs	r5, #31
 8000c1c:	197c      	adds	r4, r7, r5
 8000c1e:	1c18      	adds	r0, r3, #0
 8000c20:	f7ff fb06 	bl	8000230 <__aeabi_f2uiz>
 8000c24:	0003      	movs	r3, r0
 8000c26:	7023      	strb	r3, [r4, #0]
	  uint8_t humid= (uint8_t) hdht.Humidity;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <main+0x90>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	261e      	movs	r6, #30
 8000c2e:	19bc      	adds	r4, r7, r6
 8000c30:	1c18      	adds	r0, r3, #0
 8000c32:	f7ff fafd 	bl	8000230 <__aeabi_f2uiz>
 8000c36:	0003      	movs	r3, r0
 8000c38:	7023      	strb	r3, [r4, #0]

	  char data[25];
	  sprintf(data,"temp::%d  humid::%d \r\n",temperature,humid);
 8000c3a:	197b      	adds	r3, r7, r5
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	19bb      	adds	r3, r7, r6
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	490c      	ldr	r1, [pc, #48]	; (8000c74 <main+0x94>)
 8000c44:	1d38      	adds	r0, r7, #4
 8000c46:	f002 f94f 	bl	8002ee8 <siprintf>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c4a:	2390      	movs	r3, #144	; 0x90
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	2120      	movs	r1, #32
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 fd3b 	bl	80016cc <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&data, sizeof(data), 5);
 8000c56:	1d39      	adds	r1, r7, #4
 8000c58:	4807      	ldr	r0, [pc, #28]	; (8000c78 <main+0x98>)
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	2219      	movs	r2, #25
 8000c5e:	f001 fcbf 	bl	80025e0 <HAL_UART_Transmit>
	  HAL_Delay(3000);
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <main+0x9c>)
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 faa7 	bl	80011b8 <HAL_Delay>
  {
 8000c6a:	e7d0      	b.n	8000c0e <main+0x2e>
 8000c6c:	2000008c 	.word	0x2000008c
 8000c70:	20000158 	.word	0x20000158
 8000c74:	080037d4 	.word	0x080037d4
 8000c78:	200000d4 	.word	0x200000d4
 8000c7c:	00000bb8 	.word	0x00000bb8

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b099      	sub	sp, #100	; 0x64
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	242c      	movs	r4, #44	; 0x2c
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	2334      	movs	r3, #52	; 0x34
 8000c8e:	001a      	movs	r2, r3
 8000c90:	2100      	movs	r1, #0
 8000c92:	f002 f921 	bl	8002ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c96:	231c      	movs	r3, #28
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f002 f919 	bl	8002ed8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca6:	003b      	movs	r3, r7
 8000ca8:	0018      	movs	r0, r3
 8000caa:	231c      	movs	r3, #28
 8000cac:	001a      	movs	r2, r3
 8000cae:	2100      	movs	r1, #0
 8000cb0:	f002 f912 	bl	8002ed8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb4:	0021      	movs	r1, r4
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2202      	movs	r2, #2
 8000cba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2210      	movs	r2, #16
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2202      	movs	r2, #2
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	0212      	lsls	r2, r2, #8
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	22a0      	movs	r2, #160	; 0xa0
 8000cda:	0392      	lsls	r2, r2, #14
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 fd0c 	bl	8001704 <HAL_RCC_OscConfig>
 8000cec:	1e03      	subs	r3, r0, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000cf0:	f000 f8ea 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf4:	211c      	movs	r1, #28
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2202      	movs	r2, #2
 8000d00:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2101      	movs	r1, #1
 8000d12:	0018      	movs	r0, r3
 8000d14:	f001 f87c 	bl	8001e10 <HAL_RCC_ClockConfig>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000d1c:	f000 f8d4 	bl	8000ec8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d20:	003b      	movs	r3, r7
 8000d22:	2202      	movs	r2, #2
 8000d24:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d26:	003b      	movs	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	003b      	movs	r3, r7
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f001 f9e8 	bl	8002104 <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d38:	f000 f8c6 	bl	8000ec8 <Error_Handler>
  }
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b019      	add	sp, #100	; 0x64
 8000d42:	bd90      	pop	{r4, r7, pc}

08000d44 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_TIM17_Init+0x44>)
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <MX_TIM17_Init+0x48>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 47;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_TIM17_Init+0x44>)
 8000d50:	222f      	movs	r2, #47	; 0x2f
 8000d52:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_TIM17_Init+0x44>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_TIM17_Init+0x44>)
 8000d5c:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <MX_TIM17_Init+0x4c>)
 8000d5e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_TIM17_Init+0x44>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_TIM17_Init+0x44>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_TIM17_Init+0x44>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <MX_TIM17_Init+0x44>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f001 fac5 	bl	8002304 <HAL_TIM_Base_Init>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000d7e:	f000 f8a3 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000008c 	.word	0x2000008c
 8000d8c:	40014800 	.word	0x40014800
 8000d90:	0000ffff 	.word	0x0000ffff

08000d94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <MX_USART2_UART_Init+0x5c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000da0:	22e1      	movs	r2, #225	; 0xe1
 8000da2:	0252      	lsls	r2, r2, #9
 8000da4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f001 fbad 	bl	8002538 <HAL_UART_Init>
 8000dde:	1e03      	subs	r3, r0, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000de2:	f000 f871 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000d4 	.word	0x200000d4
 8000df0:	40004400 	.word	0x40004400

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	240c      	movs	r4, #12
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2314      	movs	r3, #20
 8000e02:	001a      	movs	r2, r3
 8000e04:	2100      	movs	r1, #0
 8000e06:	f002 f867 	bl	8002ed8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e0c:	695a      	ldr	r2, [r3, #20]
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	0309      	lsls	r1, r1, #12
 8000e14:	430a      	orrs	r2, r1
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	031b      	lsls	r3, r3, #12
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	03c9      	lsls	r1, r1, #15
 8000e30:	430a      	orrs	r2, r1
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e36:	695a      	ldr	r2, [r3, #20]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	03db      	lsls	r3, r3, #15
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0289      	lsls	r1, r1, #10
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_GPIO_Init+0xcc>)
 8000e52:	695a      	ldr	r2, [r3, #20]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	029b      	lsls	r3, r3, #10
 8000e58:	4013      	ands	r3, r2
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e5e:	2390      	movs	r3, #144	; 0x90
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	2200      	movs	r2, #0
 8000e64:	21a0      	movs	r1, #160	; 0xa0
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 fc13 	bl	8001692 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	0192      	lsls	r2, r2, #6
 8000e72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	2284      	movs	r2, #132	; 0x84
 8000e78:	0392      	lsls	r2, r2, #14
 8000e7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <MX_GPIO_Init+0xd0>)
 8000e86:	0019      	movs	r1, r3
 8000e88:	0010      	movs	r0, r2
 8000e8a:	f000 fa6d 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8000e8e:	0021      	movs	r1, r4
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	22a0      	movs	r2, #160	; 0xa0
 8000e94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2201      	movs	r2, #1
 8000e9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	187a      	adds	r2, r7, r1
 8000eaa:	2390      	movs	r3, #144	; 0x90
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f000 fa59 	bl	8001368 <HAL_GPIO_Init>

}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b009      	add	sp, #36	; 0x24
 8000ebc:	bd90      	pop	{r4, r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000800 	.word	0x48000800

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_MspInit+0x44>)
 8000edc:	699a      	ldr	r2, [r3, #24]
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_MspInit+0x44>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	619a      	str	r2, [r3, #24]
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_MspInit+0x44>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	2201      	movs	r2, #1
 8000eec:	4013      	ands	r3, r2
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_MspInit+0x44>)
 8000ef4:	69da      	ldr	r2, [r3, #28]
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_MspInit+0x44>)
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	0549      	lsls	r1, r1, #21
 8000efc:	430a      	orrs	r2, r1
 8000efe:	61da      	str	r2, [r3, #28]
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_MspInit+0x44>)
 8000f02:	69da      	ldr	r2, [r3, #28]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	055b      	lsls	r3, r3, #21
 8000f08:	4013      	ands	r3, r2
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_TIM_Base_MspInit+0x38>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10d      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_TIM_Base_MspInit+0x3c>)
 8000f30:	699a      	ldr	r2, [r3, #24]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_TIM_Base_MspInit+0x3c>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	02c9      	lsls	r1, r1, #11
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	619a      	str	r2, [r3, #24]
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_TIM_Base_MspInit+0x3c>)
 8000f3e:	699a      	ldr	r2, [r3, #24]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	02db      	lsls	r3, r3, #11
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40014800 	.word	0x40014800
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b08b      	sub	sp, #44	; 0x2c
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	2414      	movs	r4, #20
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	0018      	movs	r0, r3
 8000f6a:	2314      	movs	r3, #20
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	f001 ffb2 	bl	8002ed8 <memset>
  if(huart->Instance==USART2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <HAL_UART_MspInit+0x90>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d132      	bne.n	8000fe4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_UART_MspInit+0x94>)
 8000f80:	69da      	ldr	r2, [r3, #28]
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <HAL_UART_MspInit+0x94>)
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	0289      	lsls	r1, r1, #10
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	61da      	str	r2, [r3, #28]
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_UART_MspInit+0x94>)
 8000f8e:	69da      	ldr	r2, [r3, #28]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	029b      	lsls	r3, r3, #10
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_UART_MspInit+0x94>)
 8000f9c:	695a      	ldr	r2, [r3, #20]
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_UART_MspInit+0x94>)
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	0289      	lsls	r1, r1, #10
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_UART_MspInit+0x94>)
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	029b      	lsls	r3, r3, #10
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fb6:	0021      	movs	r1, r4
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	187a      	adds	r2, r7, r1
 8000fd8:	2390      	movs	r3, #144	; 0x90
 8000fda:	05db      	lsls	r3, r3, #23
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 f9c2 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b00b      	add	sp, #44	; 0x2c
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	40004400 	.word	0x40004400
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 f8b2 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800102c:	4a14      	ldr	r2, [pc, #80]	; (8001080 <_sbrk+0x5c>)
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <_sbrk+0x60>)
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <_sbrk+0x64>)
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <_sbrk+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	18d3      	adds	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	d207      	bcs.n	8001064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001054:	f001 ff16 	bl	8002e84 <__errno>
 8001058:	0003      	movs	r3, r0
 800105a:	220c      	movs	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105e:	2301      	movs	r3, #1
 8001060:	425b      	negs	r3, r3
 8001062:	e009      	b.n	8001078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	18d2      	adds	r2, r2, r3
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <_sbrk+0x64>)
 8001074:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b006      	add	sp, #24
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20008000 	.word	0x20008000
 8001084:	00000400 	.word	0x00000400
 8001088:	2000016c 	.word	0x2000016c
 800108c:	20000188 	.word	0x20000188

08001090 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800109e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a2:	490e      	ldr	r1, [pc, #56]	; (80010dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a4:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <LoopForever+0xe>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b8:	4c0b      	ldr	r4, [pc, #44]	; (80010e8 <LoopForever+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010c6:	f7ff ffe3 	bl	8001090 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010ca:	f001 fee1 	bl	8002e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ce:	f7ff fd87 	bl	8000be0 <main>

080010d2 <LoopForever>:

LoopForever:
    b LoopForever
 80010d2:	e7fe      	b.n	80010d2 <LoopForever>
  ldr   r0, =_estack
 80010d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010e0:	08003860 	.word	0x08003860
  ldr r2, =_sbss
 80010e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010e8:	20000184 	.word	0x20000184

080010ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_COMP_IRQHandler>
	...

080010f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <HAL_Init+0x24>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_Init+0x24>)
 80010fa:	2110      	movs	r1, #16
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001100:	2000      	movs	r0, #0
 8001102:	f000 f809 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001106:	f7ff fee5 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_InitTick+0x5c>)
 8001122:	681c      	ldr	r4, [r3, #0]
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_InitTick+0x60>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	0019      	movs	r1, r3
 800112a:	23fa      	movs	r3, #250	; 0xfa
 800112c:	0098      	lsls	r0, r3, #2
 800112e:	f7fe fff3 	bl	8000118 <__udivsi3>
 8001132:	0003      	movs	r3, r0
 8001134:	0019      	movs	r1, r3
 8001136:	0020      	movs	r0, r4
 8001138:	f7fe ffee 	bl	8000118 <__udivsi3>
 800113c:	0003      	movs	r3, r0
 800113e:	0018      	movs	r0, r3
 8001140:	f000 f905 	bl	800134e <HAL_SYSTICK_Config>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d001      	beq.n	800114c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e00f      	b.n	800116c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d80b      	bhi.n	800116a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	2301      	movs	r3, #1
 8001156:	425b      	negs	r3, r3
 8001158:	2200      	movs	r2, #0
 800115a:	0018      	movs	r0, r3
 800115c:	f000 f8e2 	bl	8001324 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_InitTick+0x64>)
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b003      	add	sp, #12
 8001172:	bd90      	pop	{r4, r7, pc}
 8001174:	20000000 	.word	0x20000000
 8001178:	20000008 	.word	0x20000008
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x1c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	001a      	movs	r2, r3
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x20>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	18d2      	adds	r2, r2, r3
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_IncTick+0x20>)
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000170 	.word	0x20000170

080011a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <HAL_GetTick+0x10>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	20000170 	.word	0x20000170

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff fff0 	bl	80011a4 <HAL_GetTick>
 80011c4:	0003      	movs	r3, r0
 80011c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	001a      	movs	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	189b      	adds	r3, r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	f7ff ffe0 	bl	80011a4 <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	20000008 	.word	0x20000008

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	0002      	movs	r2, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b7f      	cmp	r3, #127	; 0x7f
 8001214:	d828      	bhi.n	8001268 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001216:	4a2f      	ldr	r2, [pc, #188]	; (80012d4 <__NVIC_SetPriority+0xd4>)
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b25b      	sxtb	r3, r3
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	33c0      	adds	r3, #192	; 0xc0
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	589b      	ldr	r3, [r3, r2]
 8001226:	1dfa      	adds	r2, r7, #7
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	0011      	movs	r1, r2
 800122c:	2203      	movs	r2, #3
 800122e:	400a      	ands	r2, r1
 8001230:	00d2      	lsls	r2, r2, #3
 8001232:	21ff      	movs	r1, #255	; 0xff
 8001234:	4091      	lsls	r1, r2
 8001236:	000a      	movs	r2, r1
 8001238:	43d2      	mvns	r2, r2
 800123a:	401a      	ands	r2, r3
 800123c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	019b      	lsls	r3, r3, #6
 8001242:	22ff      	movs	r2, #255	; 0xff
 8001244:	401a      	ands	r2, r3
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	0018      	movs	r0, r3
 800124c:	2303      	movs	r3, #3
 800124e:	4003      	ands	r3, r0
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001254:	481f      	ldr	r0, [pc, #124]	; (80012d4 <__NVIC_SetPriority+0xd4>)
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b25b      	sxtb	r3, r3
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	430a      	orrs	r2, r1
 8001260:	33c0      	adds	r3, #192	; 0xc0
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001266:	e031      	b.n	80012cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001268:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <__NVIC_SetPriority+0xd8>)
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	0019      	movs	r1, r3
 8001270:	230f      	movs	r3, #15
 8001272:	400b      	ands	r3, r1
 8001274:	3b08      	subs	r3, #8
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3306      	adds	r3, #6
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	18d3      	adds	r3, r2, r3
 800127e:	3304      	adds	r3, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	1dfa      	adds	r2, r7, #7
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	0011      	movs	r1, r2
 8001288:	2203      	movs	r2, #3
 800128a:	400a      	ands	r2, r1
 800128c:	00d2      	lsls	r2, r2, #3
 800128e:	21ff      	movs	r1, #255	; 0xff
 8001290:	4091      	lsls	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	43d2      	mvns	r2, r2
 8001296:	401a      	ands	r2, r3
 8001298:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	019b      	lsls	r3, r3, #6
 800129e:	22ff      	movs	r2, #255	; 0xff
 80012a0:	401a      	ands	r2, r3
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	0018      	movs	r0, r3
 80012a8:	2303      	movs	r3, #3
 80012aa:	4003      	ands	r3, r0
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <__NVIC_SetPriority+0xd8>)
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	001c      	movs	r4, r3
 80012b8:	230f      	movs	r3, #15
 80012ba:	4023      	ands	r3, r4
 80012bc:	3b08      	subs	r3, #8
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	430a      	orrs	r2, r1
 80012c2:	3306      	adds	r3, #6
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	18c3      	adds	r3, r0, r3
 80012c8:	3304      	adds	r3, #4
 80012ca:	601a      	str	r2, [r3, #0]
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b003      	add	sp, #12
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	045b      	lsls	r3, r3, #17
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d301      	bcc.n	80012f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f0:	2301      	movs	r3, #1
 80012f2:	e010      	b.n	8001316 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <SysTick_Config+0x44>)
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	3a01      	subs	r2, #1
 80012fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fc:	2301      	movs	r3, #1
 80012fe:	425b      	negs	r3, r3
 8001300:	2103      	movs	r1, #3
 8001302:	0018      	movs	r0, r3
 8001304:	f7ff ff7c 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x44>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x44>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	210f      	movs	r1, #15
 8001330:	187b      	adds	r3, r7, r1
 8001332:	1c02      	adds	r2, r0, #0
 8001334:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	187b      	adds	r3, r7, r1
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b25b      	sxtb	r3, r3
 800133e:	0011      	movs	r1, r2
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff ffbf 	bl	80012dc <SysTick_Config>
 800135e:	0003      	movs	r3, r0
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e155      	b.n	8001624 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4091      	lsls	r1, r2
 8001382:	000a      	movs	r2, r1
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d100      	bne.n	8001390 <HAL_GPIO_Init+0x28>
 800138e:	e146      	b.n	800161e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2203      	movs	r2, #3
 80013a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	409a      	lsls	r2, r3
 80013b6:	0013      	movs	r3, r2
 80013b8:	43da      	mvns	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	409a      	lsls	r2, r3
 80013ca:	0013      	movs	r3, r2
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	2201      	movs	r2, #1
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2203      	movs	r2, #3
 8001410:	4013      	ands	r3, r2
 8001412:	2b03      	cmp	r3, #3
 8001414:	d017      	beq.n	8001446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	43da      	mvns	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	4013      	ands	r3, r2
 800144e:	2b02      	cmp	r3, #2
 8001450:	d123      	bne.n	800149a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	58d3      	ldr	r3, [r2, r3]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2207      	movs	r2, #7
 8001464:	4013      	ands	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2107      	movs	r1, #7
 800147e:	400b      	ands	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	0092      	lsls	r2, r2, #2
 8001496:	6939      	ldr	r1, [r7, #16]
 8001498:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	43da      	mvns	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2203      	movs	r2, #3
 80014b8:	401a      	ands	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	23c0      	movs	r3, #192	; 0xc0
 80014d4:	029b      	lsls	r3, r3, #10
 80014d6:	4013      	ands	r3, r2
 80014d8:	d100      	bne.n	80014dc <HAL_GPIO_Init+0x174>
 80014da:	e0a0      	b.n	800161e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b57      	ldr	r3, [pc, #348]	; (800163c <HAL_GPIO_Init+0x2d4>)
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	4b56      	ldr	r3, [pc, #344]	; (800163c <HAL_GPIO_Init+0x2d4>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	430a      	orrs	r2, r1
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	4b54      	ldr	r3, [pc, #336]	; (800163c <HAL_GPIO_Init+0x2d4>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4013      	ands	r3, r2
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f4:	4a52      	ldr	r2, [pc, #328]	; (8001640 <HAL_GPIO_Init+0x2d8>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	589b      	ldr	r3, [r3, r2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2203      	movs	r2, #3
 8001506:	4013      	ands	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	409a      	lsls	r2, r3
 800150e:	0013      	movs	r3, r2
 8001510:	43da      	mvns	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	2390      	movs	r3, #144	; 0x90
 800151c:	05db      	lsls	r3, r3, #23
 800151e:	429a      	cmp	r2, r3
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a47      	ldr	r2, [pc, #284]	; (8001644 <HAL_GPIO_Init+0x2dc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x1ea>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a46      	ldr	r2, [pc, #280]	; (8001648 <HAL_GPIO_Init+0x2e0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x1e6>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a45      	ldr	r2, [pc, #276]	; (800164c <HAL_GPIO_Init+0x2e4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x1e2>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a44      	ldr	r2, [pc, #272]	; (8001650 <HAL_GPIO_Init+0x2e8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x1de>
 8001542:	2304      	movs	r3, #4
 8001544:	e008      	b.n	8001558 <HAL_GPIO_Init+0x1f0>
 8001546:	2305      	movs	r3, #5
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x1f0>
 800154a:	2303      	movs	r3, #3
 800154c:	e004      	b.n	8001558 <HAL_GPIO_Init+0x1f0>
 800154e:	2302      	movs	r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x1f0>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x1f0>
 8001556:	2300      	movs	r3, #0
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	2103      	movs	r1, #3
 800155c:	400a      	ands	r2, r1
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4093      	lsls	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001568:	4935      	ldr	r1, [pc, #212]	; (8001640 <HAL_GPIO_Init+0x2d8>)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001576:	4b37      	ldr	r3, [pc, #220]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43da      	mvns	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	025b      	lsls	r3, r3, #9
 800158e:	4013      	ands	r3, r2
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43da      	mvns	r2, r3
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	029b      	lsls	r3, r3, #10
 80015b8:	4013      	ands	r3, r2
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43da      	mvns	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	035b      	lsls	r3, r3, #13
 80015e2:	4013      	ands	r3, r2
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43da      	mvns	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	039b      	lsls	r3, r3, #14
 800160c:	4013      	ands	r3, r2
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	40da      	lsrs	r2, r3
 800162c:	1e13      	subs	r3, r2, #0
 800162e:	d000      	beq.n	8001632 <HAL_GPIO_Init+0x2ca>
 8001630:	e6a2      	b.n	8001378 <HAL_GPIO_Init+0x10>
  } 
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b006      	add	sp, #24
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800
 800164c:	48000c00 	.word	0x48000c00
 8001650:	48001000 	.word	0x48001000
 8001654:	40010400 	.word	0x40010400

08001658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	000a      	movs	r2, r1
 8001662:	1cbb      	adds	r3, r7, #2
 8001664:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	1cba      	adds	r2, r7, #2
 800166c:	8812      	ldrh	r2, [r2, #0]
 800166e:	4013      	ands	r3, r2
 8001670:	d004      	beq.n	800167c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001672:	230f      	movs	r3, #15
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e003      	b.n	8001684 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800167c:	230f      	movs	r3, #15
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001684:	230f      	movs	r3, #15
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	781b      	ldrb	r3, [r3, #0]
  }
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b004      	add	sp, #16
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	0008      	movs	r0, r1
 800169c:	0011      	movs	r1, r2
 800169e:	1cbb      	adds	r3, r7, #2
 80016a0:	1c02      	adds	r2, r0, #0
 80016a2:	801a      	strh	r2, [r3, #0]
 80016a4:	1c7b      	adds	r3, r7, #1
 80016a6:	1c0a      	adds	r2, r1, #0
 80016a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016aa:	1c7b      	adds	r3, r7, #1
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b2:	1cbb      	adds	r3, r7, #2
 80016b4:	881a      	ldrh	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016ba:	e003      	b.n	80016c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016bc:	1cbb      	adds	r3, r7, #2
 80016be:	881a      	ldrh	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	000a      	movs	r2, r1
 80016d6:	1cbb      	adds	r3, r7, #2
 80016d8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e0:	1cbb      	adds	r3, r7, #2
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	041a      	lsls	r2, r3, #16
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	1cb9      	adds	r1, r7, #2
 80016f0:	8809      	ldrh	r1, [r1, #0]
 80016f2:	400b      	ands	r3, r1
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b004      	add	sp, #16
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	f000 fb76 	bl	8001e04 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	4013      	ands	r3, r2
 8001720:	d100      	bne.n	8001724 <HAL_RCC_OscConfig+0x20>
 8001722:	e08e      	b.n	8001842 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001724:	4bc5      	ldr	r3, [pc, #788]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	220c      	movs	r2, #12
 800172a:	4013      	ands	r3, r2
 800172c:	2b04      	cmp	r3, #4
 800172e:	d00e      	beq.n	800174e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001730:	4bc2      	ldr	r3, [pc, #776]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	220c      	movs	r2, #12
 8001736:	4013      	ands	r3, r2
 8001738:	2b08      	cmp	r3, #8
 800173a:	d117      	bne.n	800176c <HAL_RCC_OscConfig+0x68>
 800173c:	4bbf      	ldr	r3, [pc, #764]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	23c0      	movs	r3, #192	; 0xc0
 8001742:	025b      	lsls	r3, r3, #9
 8001744:	401a      	ands	r2, r3
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	429a      	cmp	r2, r3
 800174c:	d10e      	bne.n	800176c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174e:	4bbb      	ldr	r3, [pc, #748]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	029b      	lsls	r3, r3, #10
 8001756:	4013      	ands	r3, r2
 8001758:	d100      	bne.n	800175c <HAL_RCC_OscConfig+0x58>
 800175a:	e071      	b.n	8001840 <HAL_RCC_OscConfig+0x13c>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d000      	beq.n	8001766 <HAL_RCC_OscConfig+0x62>
 8001764:	e06c      	b.n	8001840 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f000 fb4c 	bl	8001e04 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d107      	bne.n	8001784 <HAL_RCC_OscConfig+0x80>
 8001774:	4bb1      	ldr	r3, [pc, #708]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4bb0      	ldr	r3, [pc, #704]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	0249      	lsls	r1, r1, #9
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e02f      	b.n	80017e4 <HAL_RCC_OscConfig+0xe0>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_OscConfig+0xa2>
 800178c:	4bab      	ldr	r3, [pc, #684]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4baa      	ldr	r3, [pc, #680]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001792:	49ab      	ldr	r1, [pc, #684]	; (8001a40 <HAL_RCC_OscConfig+0x33c>)
 8001794:	400a      	ands	r2, r1
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	4ba8      	ldr	r3, [pc, #672]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4ba7      	ldr	r3, [pc, #668]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 800179e:	49a9      	ldr	r1, [pc, #676]	; (8001a44 <HAL_RCC_OscConfig+0x340>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e01e      	b.n	80017e4 <HAL_RCC_OscConfig+0xe0>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d10e      	bne.n	80017cc <HAL_RCC_OscConfig+0xc8>
 80017ae:	4ba3      	ldr	r3, [pc, #652]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4ba2      	ldr	r3, [pc, #648]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	02c9      	lsls	r1, r1, #11
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	4b9f      	ldr	r3, [pc, #636]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b9e      	ldr	r3, [pc, #632]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80017c2:	2180      	movs	r1, #128	; 0x80
 80017c4:	0249      	lsls	r1, r1, #9
 80017c6:	430a      	orrs	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0xe0>
 80017cc:	4b9b      	ldr	r3, [pc, #620]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b9a      	ldr	r3, [pc, #616]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80017d2:	499b      	ldr	r1, [pc, #620]	; (8001a40 <HAL_RCC_OscConfig+0x33c>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	4b98      	ldr	r3, [pc, #608]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b97      	ldr	r3, [pc, #604]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80017de:	4999      	ldr	r1, [pc, #612]	; (8001a44 <HAL_RCC_OscConfig+0x340>)
 80017e0:	400a      	ands	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d014      	beq.n	8001816 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fcda 	bl	80011a4 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f6:	f7ff fcd5 	bl	80011a4 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b64      	cmp	r3, #100	; 0x64
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e2fd      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001808:	4b8c      	ldr	r3, [pc, #560]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	4013      	ands	r3, r2
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0xf2>
 8001814:	e015      	b.n	8001842 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff fcc5 	bl	80011a4 <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff fcc0 	bl	80011a4 <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e2e8      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	4b82      	ldr	r3, [pc, #520]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	4013      	ands	r3, r2
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x11c>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2202      	movs	r2, #2
 8001848:	4013      	ands	r3, r2
 800184a:	d100      	bne.n	800184e <HAL_RCC_OscConfig+0x14a>
 800184c:	e06c      	b.n	8001928 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800184e:	4b7b      	ldr	r3, [pc, #492]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	220c      	movs	r2, #12
 8001854:	4013      	ands	r3, r2
 8001856:	d00e      	beq.n	8001876 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001858:	4b78      	ldr	r3, [pc, #480]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	220c      	movs	r2, #12
 800185e:	4013      	ands	r3, r2
 8001860:	2b08      	cmp	r3, #8
 8001862:	d11f      	bne.n	80018a4 <HAL_RCC_OscConfig+0x1a0>
 8001864:	4b75      	ldr	r3, [pc, #468]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	23c0      	movs	r3, #192	; 0xc0
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	401a      	ands	r2, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	429a      	cmp	r2, r3
 8001874:	d116      	bne.n	80018a4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	4b71      	ldr	r3, [pc, #452]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2202      	movs	r2, #2
 800187c:	4013      	ands	r3, r2
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x188>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d001      	beq.n	800188c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e2bb      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b6b      	ldr	r3, [pc, #428]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	22f8      	movs	r2, #248	; 0xf8
 8001892:	4393      	bics	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00da      	lsls	r2, r3, #3
 800189c:	4b67      	ldr	r3, [pc, #412]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	e041      	b.n	8001928 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d024      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ac:	4b63      	ldr	r3, [pc, #396]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc74 	bl	80011a4 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fc6f 	bl	80011a4 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e297      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2202      	movs	r2, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	d0f1      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b57      	ldr	r3, [pc, #348]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	22f8      	movs	r2, #248	; 0xf8
 80018e4:	4393      	bics	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	00da      	lsls	r2, r3, #3
 80018ee:	4b53      	ldr	r3, [pc, #332]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e018      	b.n	8001928 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b50      	ldr	r3, [pc, #320]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	438a      	bics	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff fc4f 	bl	80011a4 <HAL_GetTick>
 8001906:	0003      	movs	r3, r0
 8001908:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff fc4a 	bl	80011a4 <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e272      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d1f1      	bne.n	800190c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2208      	movs	r2, #8
 800192e:	4013      	ands	r3, r2
 8001930:	d036      	beq.n	80019a0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d019      	beq.n	800196e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193a:	4b40      	ldr	r3, [pc, #256]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 800193c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800193e:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001940:	2101      	movs	r1, #1
 8001942:	430a      	orrs	r2, r1
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001946:	f7ff fc2d 	bl	80011a4 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001950:	f7ff fc28 	bl	80011a4 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e250      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d0f1      	beq.n	8001950 <HAL_RCC_OscConfig+0x24c>
 800196c:	e018      	b.n	80019a0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001974:	2101      	movs	r1, #1
 8001976:	438a      	bics	r2, r1
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7ff fc13 	bl	80011a4 <HAL_GetTick>
 800197e:	0003      	movs	r3, r0
 8001980:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff fc0e 	bl	80011a4 <HAL_GetTick>
 8001988:	0002      	movs	r2, r0
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e236      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2202      	movs	r2, #2
 800199c:	4013      	ands	r3, r2
 800199e:	d1f1      	bne.n	8001984 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2204      	movs	r2, #4
 80019a6:	4013      	ands	r3, r2
 80019a8:	d100      	bne.n	80019ac <HAL_RCC_OscConfig+0x2a8>
 80019aa:	e0b5      	b.n	8001b18 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ac:	201f      	movs	r0, #31
 80019ae:	183b      	adds	r3, r7, r0
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80019b6:	69da      	ldr	r2, [r3, #28]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	055b      	lsls	r3, r3, #21
 80019bc:	4013      	ands	r3, r2
 80019be:	d110      	bne.n	80019e2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80019c2:	69da      	ldr	r2, [r3, #28]
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	0549      	lsls	r1, r1, #21
 80019ca:	430a      	orrs	r2, r1
 80019cc:	61da      	str	r2, [r3, #28]
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	055b      	lsls	r3, r3, #21
 80019d6:	4013      	ands	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019dc:	183b      	adds	r3, r7, r0
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_OscConfig+0x344>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	d11a      	bne.n	8001a24 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_RCC_OscConfig+0x344>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_RCC_OscConfig+0x344>)
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	0049      	lsls	r1, r1, #1
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fc:	f7ff fbd2 	bl	80011a4 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a06:	f7ff fbcd 	bl	80011a4 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b64      	cmp	r3, #100	; 0x64
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e1f5      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_OscConfig+0x344>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4013      	ands	r3, r2
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d10f      	bne.n	8001a4c <HAL_RCC_OscConfig+0x348>
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	430a      	orrs	r2, r1
 8001a36:	621a      	str	r2, [r3, #32]
 8001a38:	e036      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3a4>
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	fffeffff 	.word	0xfffeffff
 8001a44:	fffbffff 	.word	0xfffbffff
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x36a>
 8001a54:	4bca      	ldr	r3, [pc, #808]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001a56:	6a1a      	ldr	r2, [r3, #32]
 8001a58:	4bc9      	ldr	r3, [pc, #804]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	438a      	bics	r2, r1
 8001a5e:	621a      	str	r2, [r3, #32]
 8001a60:	4bc7      	ldr	r3, [pc, #796]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001a62:	6a1a      	ldr	r2, [r3, #32]
 8001a64:	4bc6      	ldr	r3, [pc, #792]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001a66:	2104      	movs	r1, #4
 8001a68:	438a      	bics	r2, r1
 8001a6a:	621a      	str	r2, [r3, #32]
 8001a6c:	e01c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3a4>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x38c>
 8001a76:	4bc2      	ldr	r3, [pc, #776]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001a78:	6a1a      	ldr	r2, [r3, #32]
 8001a7a:	4bc1      	ldr	r3, [pc, #772]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	621a      	str	r2, [r3, #32]
 8001a82:	4bbf      	ldr	r3, [pc, #764]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001a84:	6a1a      	ldr	r2, [r3, #32]
 8001a86:	4bbe      	ldr	r3, [pc, #760]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	621a      	str	r2, [r3, #32]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3a4>
 8001a90:	4bbb      	ldr	r3, [pc, #748]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	4bba      	ldr	r3, [pc, #744]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	438a      	bics	r2, r1
 8001a9a:	621a      	str	r2, [r3, #32]
 8001a9c:	4bb8      	ldr	r3, [pc, #736]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4bb7      	ldr	r3, [pc, #732]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d014      	beq.n	8001ada <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fb78 	bl	80011a4 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff fb73 	bl	80011a4 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4aaf      	ldr	r2, [pc, #700]	; (8001d84 <HAL_RCC_OscConfig+0x680>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e19a      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ace:	4bac      	ldr	r3, [pc, #688]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x3b6>
 8001ad8:	e013      	b.n	8001b02 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fb63 	bl	80011a4 <HAL_GetTick>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae2:	e009      	b.n	8001af8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fb5e 	bl	80011a4 <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4aa5      	ldr	r2, [pc, #660]	; (8001d84 <HAL_RCC_OscConfig+0x680>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e185      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	4ba1      	ldr	r3, [pc, #644]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b02:	231f      	movs	r3, #31
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0c:	4b9c      	ldr	r3, [pc, #624]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b0e:	69da      	ldr	r2, [r3, #28]
 8001b10:	4b9b      	ldr	r3, [pc, #620]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b12:	499d      	ldr	r1, [pc, #628]	; (8001d88 <HAL_RCC_OscConfig+0x684>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d063      	beq.n	8001bea <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d12a      	bne.n	8001b80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b2a:	4b95      	ldr	r3, [pc, #596]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2e:	4b94      	ldr	r3, [pc, #592]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b30:	2104      	movs	r1, #4
 8001b32:	430a      	orrs	r2, r1
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b36:	4b92      	ldr	r3, [pc, #584]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b3a:	4b91      	ldr	r3, [pc, #580]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fb2f 	bl	80011a4 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b4c:	f7ff fb2a 	bl	80011a4 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e152      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b5e:	4b88      	ldr	r3, [pc, #544]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b62:	2202      	movs	r2, #2
 8001b64:	4013      	ands	r3, r2
 8001b66:	d0f1      	beq.n	8001b4c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b68:	4b85      	ldr	r3, [pc, #532]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	22f8      	movs	r2, #248	; 0xf8
 8001b6e:	4393      	bics	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	00da      	lsls	r2, r3, #3
 8001b78:	4b81      	ldr	r3, [pc, #516]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b7e:	e034      	b.n	8001bea <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	3305      	adds	r3, #5
 8001b86:	d111      	bne.n	8001bac <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b88:	4b7d      	ldr	r3, [pc, #500]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b8c:	4b7c      	ldr	r3, [pc, #496]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b8e:	2104      	movs	r1, #4
 8001b90:	438a      	bics	r2, r1
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b94:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b98:	22f8      	movs	r2, #248	; 0xf8
 8001b9a:	4393      	bics	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	00da      	lsls	r2, r3, #3
 8001ba4:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8001baa:	e01e      	b.n	8001bea <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bac:	4b74      	ldr	r3, [pc, #464]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb0:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bb8:	4b71      	ldr	r3, [pc, #452]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bbc:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	438a      	bics	r2, r1
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff faee 	bl	80011a4 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bce:	f7ff fae9 	bl	80011a4 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e111      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001be0:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d1f1      	bne.n	8001bce <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d05c      	beq.n	8001cae <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001bf4:	4b62      	ldr	r3, [pc, #392]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	d00e      	beq.n	8001c1e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c00:	4b5f      	ldr	r3, [pc, #380]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	220c      	movs	r2, #12
 8001c06:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d114      	bne.n	8001c36 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c0c:	4b5c      	ldr	r3, [pc, #368]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	23c0      	movs	r3, #192	; 0xc0
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	401a      	ands	r2, r3
 8001c16:	23c0      	movs	r3, #192	; 0xc0
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d10b      	bne.n	8001c36 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c1e:	4b58      	ldr	r3, [pc, #352]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	4013      	ands	r3, r2
 8001c28:	d040      	beq.n	8001cac <HAL_RCC_OscConfig+0x5a8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d03c      	beq.n	8001cac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0e6      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d01b      	beq.n	8001c76 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c3e:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c42:	4b4f      	ldr	r3, [pc, #316]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	0249      	lsls	r1, r1, #9
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff faaa 	bl	80011a4 <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c56:	f7ff faa5 	bl	80011a4 <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0cd      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c68:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	025b      	lsls	r3, r3, #9
 8001c70:	4013      	ands	r3, r2
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x552>
 8001c74:	e01b      	b.n	8001cae <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c76:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001c7c:	4943      	ldr	r1, [pc, #268]	; (8001d8c <HAL_RCC_OscConfig+0x688>)
 8001c7e:	400a      	ands	r2, r1
 8001c80:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fa8f 	bl	80011a4 <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c8c:	f7ff fa8a 	bl	80011a4 <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e0b2      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	025b      	lsls	r3, r3, #9
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x588>
 8001caa:	e000      	b.n	8001cae <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001cac:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d100      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x5b4>
 8001cb6:	e0a4      	b.n	8001e02 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	220c      	movs	r2, #12
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5c2>
 8001cc4:	e078      	b.n	8001db8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d14c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001cd4:	492e      	ldr	r1, [pc, #184]	; (8001d90 <HAL_RCC_OscConfig+0x68c>)
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff fa63 	bl	80011a4 <HAL_GetTick>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff fa5e 	bl	80011a4 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e086      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	049b      	lsls	r3, r3, #18
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	220f      	movs	r2, #15
 8001d08:	4393      	bics	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001d12:	430a      	orrs	r2, r1
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <HAL_RCC_OscConfig+0x690>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001d36:	2180      	movs	r1, #128	; 0x80
 8001d38:	0449      	lsls	r1, r1, #17
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fa31 	bl	80011a4 <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d48:	f7ff fa2c 	bl	80011a4 <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e054      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	049b      	lsls	r3, r3, #18
 8001d62:	4013      	ands	r3, r2
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x644>
 8001d66:	e04c      	b.n	8001e02 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <HAL_RCC_OscConfig+0x67c>)
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <HAL_RCC_OscConfig+0x68c>)
 8001d70:	400a      	ands	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fa16 	bl	80011a4 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x6a6>
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	40021000 	.word	0x40021000
 8001d84:	00001388 	.word	0x00001388
 8001d88:	efffffff 	.word	0xefffffff
 8001d8c:	fffeffff 	.word	0xfffeffff
 8001d90:	feffffff 	.word	0xfeffffff
 8001d94:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff fa04 	bl	80011a4 <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e02c      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_RCC_OscConfig+0x708>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	049b      	lsls	r3, r3, #18
 8001db2:	4013      	ands	r3, r2
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x694>
 8001db6:	e024      	b.n	8001e02 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e01f      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_RCC_OscConfig+0x708>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x708>)
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	23c0      	movs	r3, #192	; 0xc0
 8001dd4:	025b      	lsls	r3, r3, #9
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d10e      	bne.n	8001dfe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	220f      	movs	r2, #15
 8001de4:	401a      	ands	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	23f0      	movs	r3, #240	; 0xf0
 8001df2:	039b      	lsls	r3, r3, #14
 8001df4:	401a      	ands	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b008      	add	sp, #32
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0bf      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCC_ClockConfig+0x19c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d911      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <HAL_RCC_ClockConfig+0x19c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2201      	movs	r2, #1
 8001e38:	4393      	bics	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	4b5b      	ldr	r3, [pc, #364]	; (8001fac <HAL_RCC_ClockConfig+0x19c>)
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e44:	4b59      	ldr	r3, [pc, #356]	; (8001fac <HAL_RCC_ClockConfig+0x19c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0a6      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d015      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2204      	movs	r2, #4
 8001e66:	4013      	ands	r3, r2
 8001e68:	d006      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e6a:	4b51      	ldr	r3, [pc, #324]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001e70:	21e0      	movs	r1, #224	; 0xe0
 8001e72:	00c9      	lsls	r1, r1, #3
 8001e74:	430a      	orrs	r2, r1
 8001e76:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b4d      	ldr	r3, [pc, #308]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	22f0      	movs	r2, #240	; 0xf0
 8001e7e:	4393      	bics	r3, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	d04c      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d120      	bne.n	8001eec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e07a      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	4b3e      	ldr	r3, [pc, #248]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	049b      	lsls	r3, r3, #18
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d114      	bne.n	8001eec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e06e      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ece:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	025b      	lsls	r3, r3, #9
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d108      	bne.n	8001eec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e062      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	4b34      	ldr	r3, [pc, #208]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e05b      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eec:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	4393      	bics	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f00:	f7ff f950 	bl	80011a4 <HAL_GetTick>
 8001f04:	0003      	movs	r3, r0
 8001f06:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f08:	e009      	b.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0a:	f7ff f94b 	bl	80011a4 <HAL_GetTick>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <HAL_RCC_ClockConfig+0x1a4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e042      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	220c      	movs	r2, #12
 8001f24:	401a      	ands	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1ec      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCC_ClockConfig+0x19c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d211      	bcs.n	8001f62 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_RCC_ClockConfig+0x19c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4393      	bics	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_RCC_ClockConfig+0x19c>)
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_RCC_ClockConfig+0x19c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e020      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2204      	movs	r2, #4
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d009      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_RCC_ClockConfig+0x1a8>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f80:	f000 f820 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f84:	0001      	movs	r1, r0
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_RCC_ClockConfig+0x1a0>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	4013      	ands	r3, r2
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_RCC_ClockConfig+0x1ac>)
 8001f92:	5cd3      	ldrb	r3, [r2, r3]
 8001f94:	000a      	movs	r2, r1
 8001f96:	40da      	lsrs	r2, r3
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff f8bb 	bl	8001118 <HAL_InitTick>
  
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	00001388 	.word	0x00001388
 8001fb8:	fffff8ff 	.word	0xfffff8ff
 8001fbc:	0800380c 	.word	0x0800380c
 8001fc0:	20000000 	.word	0x20000000

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b08f      	sub	sp, #60	; 0x3c
 8001fc8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001fca:	2314      	movs	r3, #20
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	4a38      	ldr	r2, [pc, #224]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xec>)
 8001fd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001fd2:	c313      	stmia	r3!, {r0, r1, r4}
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	4a36      	ldr	r2, [pc, #216]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001fdc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001fde:	c313      	stmia	r3!, {r0, r1, r4}
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002000:	220c      	movs	r2, #12
 8002002:	4013      	ands	r3, r2
 8002004:	2b0c      	cmp	r3, #12
 8002006:	d047      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0xd4>
 8002008:	d849      	bhi.n	800209e <HAL_RCC_GetSysClockFreq+0xda>
 800200a:	2b04      	cmp	r3, #4
 800200c:	d002      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x50>
 800200e:	2b08      	cmp	r3, #8
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x56>
 8002012:	e044      	b.n	800209e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002014:	4b29      	ldr	r3, [pc, #164]	; (80020bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002018:	e044      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201c:	0c9b      	lsrs	r3, r3, #18
 800201e:	220f      	movs	r2, #15
 8002020:	4013      	ands	r3, r2
 8002022:	2214      	movs	r2, #20
 8002024:	18ba      	adds	r2, r7, r2
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800202a:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	220f      	movs	r2, #15
 8002030:	4013      	ands	r3, r2
 8002032:	1d3a      	adds	r2, r7, #4
 8002034:	5cd3      	ldrb	r3, [r2, r3]
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800203a:	23c0      	movs	r3, #192	; 0xc0
 800203c:	025b      	lsls	r3, r3, #9
 800203e:	401a      	ands	r2, r3
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	025b      	lsls	r3, r3, #9
 8002044:	429a      	cmp	r2, r3
 8002046:	d109      	bne.n	800205c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800204a:	481c      	ldr	r0, [pc, #112]	; (80020bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800204c:	f7fe f864 	bl	8000118 <__udivsi3>
 8002050:	0003      	movs	r3, r0
 8002052:	001a      	movs	r2, r3
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	4353      	muls	r3, r2
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
 800205a:	e01a      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800205c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800205e:	23c0      	movs	r3, #192	; 0xc0
 8002060:	025b      	lsls	r3, r3, #9
 8002062:	401a      	ands	r2, r3
 8002064:	23c0      	movs	r3, #192	; 0xc0
 8002066:	025b      	lsls	r3, r3, #9
 8002068:	429a      	cmp	r2, r3
 800206a:	d109      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800206c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800206e:	4814      	ldr	r0, [pc, #80]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002070:	f7fe f852 	bl	8000118 <__udivsi3>
 8002074:	0003      	movs	r3, r0
 8002076:	001a      	movs	r2, r3
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	4353      	muls	r3, r2
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
 800207e:	e008      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002082:	480e      	ldr	r0, [pc, #56]	; (80020bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002084:	f7fe f848 	bl	8000118 <__udivsi3>
 8002088:	0003      	movs	r3, r0
 800208a:	001a      	movs	r2, r3
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	4353      	muls	r3, r2
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002096:	e005      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800209c:	e002      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b00f      	add	sp, #60	; 0x3c
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	080037ec 	.word	0x080037ec
 80020b4:	080037fc 	.word	0x080037fc
 80020b8:	40021000 	.word	0x40021000
 80020bc:	007a1200 	.word	0x007a1200
 80020c0:	02dc6c00 	.word	0x02dc6c00

080020c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	20000000 	.word	0x20000000

080020d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80020dc:	f7ff fff2 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e0:	0001      	movs	r1, r0
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	2207      	movs	r2, #7
 80020ea:	4013      	ands	r3, r2
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	40d9      	lsrs	r1, r3
 80020f2:	000b      	movs	r3, r1
}    
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	40021000 	.word	0x40021000
 8002100:	0800381c 	.word	0x0800381c

08002104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	025b      	lsls	r3, r3, #9
 800211c:	4013      	ands	r3, r2
 800211e:	d100      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002120:	e08e      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002122:	2017      	movs	r0, #23
 8002124:	183b      	adds	r3, r7, r0
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b6e      	ldr	r3, [pc, #440]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	055b      	lsls	r3, r3, #21
 8002132:	4013      	ands	r3, r2
 8002134:	d110      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b6b      	ldr	r3, [pc, #428]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	0549      	lsls	r1, r1, #21
 8002140:	430a      	orrs	r2, r1
 8002142:	61da      	str	r2, [r3, #28]
 8002144:	4b67      	ldr	r3, [pc, #412]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	055b      	lsls	r3, r3, #21
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	183b      	adds	r3, r7, r0
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4013      	ands	r3, r2
 8002162:	d11a      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002164:	4b60      	ldr	r3, [pc, #384]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b5f      	ldr	r3, [pc, #380]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	0049      	lsls	r1, r1, #1
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002172:	f7ff f817 	bl	80011a4 <HAL_GetTick>
 8002176:	0003      	movs	r3, r0
 8002178:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	e008      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217c:	f7ff f812 	bl	80011a4 <HAL_GetTick>
 8002180:	0002      	movs	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e0a6      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218e:	4b56      	ldr	r3, [pc, #344]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4013      	ands	r3, r2
 8002198:	d0f0      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800219a:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800219c:	6a1a      	ldr	r2, [r3, #32]
 800219e:	23c0      	movs	r3, #192	; 0xc0
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4013      	ands	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d034      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	23c0      	movs	r3, #192	; 0xc0
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d02c      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021bc:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a4a      	ldr	r2, [pc, #296]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021c8:	6a1a      	ldr	r2, [r3, #32]
 80021ca:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	0249      	lsls	r1, r1, #9
 80021d0:	430a      	orrs	r2, r1
 80021d2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021d6:	6a1a      	ldr	r2, [r3, #32]
 80021d8:	4b42      	ldr	r3, [pc, #264]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021da:	4945      	ldr	r1, [pc, #276]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80021dc:	400a      	ands	r2, r1
 80021de:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021e0:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2201      	movs	r2, #1
 80021ea:	4013      	ands	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7fe ffd9 	bl	80011a4 <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f6:	e009      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7fe ffd4 	bl	80011a4 <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	4a3c      	ldr	r2, [pc, #240]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e067      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	2202      	movs	r2, #2
 8002212:	4013      	ands	r3, r2
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002216:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4a34      	ldr	r2, [pc, #208]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800221c:	4013      	ands	r3, r2
 800221e:	0019      	movs	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002226:	430a      	orrs	r2, r1
 8002228:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800222a:	2317      	movs	r3, #23
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002234:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800223a:	492f      	ldr	r1, [pc, #188]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800223c:	400a      	ands	r2, r1
 800223e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2201      	movs	r2, #1
 8002246:	4013      	ands	r3, r2
 8002248:	d009      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	2203      	movs	r2, #3
 8002250:	4393      	bics	r3, r2
 8002252:	0019      	movs	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800225a:	430a      	orrs	r2, r1
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2202      	movs	r2, #2
 8002264:	4013      	ands	r3, r2
 8002266:	d009      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	4a23      	ldr	r2, [pc, #140]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800226e:	4013      	ands	r3, r2
 8002270:	0019      	movs	r1, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002278:	430a      	orrs	r2, r1
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	02db      	lsls	r3, r3, #11
 8002284:	4013      	ands	r3, r2
 8002286:	d009      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002298:	430a      	orrs	r2, r1
 800229a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2220      	movs	r2, #32
 80022a2:	4013      	ands	r3, r2
 80022a4:	d009      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	2210      	movs	r2, #16
 80022ac:	4393      	bics	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022b6:	430a      	orrs	r2, r1
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4013      	ands	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	2240      	movs	r2, #64	; 0x40
 80022cc:	4393      	bics	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022d6:	430a      	orrs	r2, r1
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	0018      	movs	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	b006      	add	sp, #24
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40007000 	.word	0x40007000
 80022ec:	fffffcff 	.word	0xfffffcff
 80022f0:	fffeffff 	.word	0xfffeffff
 80022f4:	00001388 	.word	0x00001388
 80022f8:	efffffff 	.word	0xefffffff
 80022fc:	fffcffff 	.word	0xfffcffff
 8002300:	fff3ffff 	.word	0xfff3ffff

08002304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e042      	b.n	800239c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	223d      	movs	r2, #61	; 0x3d
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	223c      	movs	r2, #60	; 0x3c
 8002326:	2100      	movs	r1, #0
 8002328:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0018      	movs	r0, r3
 800232e:	f7fe fdf5 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223d      	movs	r2, #61	; 0x3d
 8002336:	2102      	movs	r1, #2
 8002338:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	0019      	movs	r1, r3
 8002344:	0010      	movs	r0, r2
 8002346:	f000 f877 	bl	8002438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2246      	movs	r2, #70	; 0x46
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	223e      	movs	r2, #62	; 0x3e
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	223f      	movs	r2, #63	; 0x3f
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2240      	movs	r2, #64	; 0x40
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2241      	movs	r2, #65	; 0x41
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2242      	movs	r2, #66	; 0x42
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2243      	movs	r2, #67	; 0x43
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2244      	movs	r2, #68	; 0x44
 8002386:	2101      	movs	r1, #1
 8002388:	5499      	strb	r1, [r3, r2]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2245      	movs	r2, #69	; 0x45
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	223d      	movs	r2, #61	; 0x3d
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	223d      	movs	r2, #61	; 0x3d
 80023b0:	5c9b      	ldrb	r3, [r3, r2]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d001      	beq.n	80023bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e033      	b.n	8002424 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	223d      	movs	r2, #61	; 0x3d
 80023c0:	2102      	movs	r1, #2
 80023c2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a18      	ldr	r2, [pc, #96]	; (800242c <HAL_TIM_Base_Start+0x88>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00f      	beq.n	80023ee <HAL_TIM_Base_Start+0x4a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	05db      	lsls	r3, r3, #23
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d009      	beq.n	80023ee <HAL_TIM_Base_Start+0x4a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a14      	ldr	r2, [pc, #80]	; (8002430 <HAL_TIM_Base_Start+0x8c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d004      	beq.n	80023ee <HAL_TIM_Base_Start+0x4a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <HAL_TIM_Base_Start+0x90>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d111      	bne.n	8002412 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2207      	movs	r2, #7
 80023f6:	4013      	ands	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b06      	cmp	r3, #6
 80023fe:	d010      	beq.n	8002422 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002410:	e007      	b.n	8002422 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2101      	movs	r1, #1
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b004      	add	sp, #16
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40000400 	.word	0x40000400
 8002434:	40014000 	.word	0x40014000

08002438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a34      	ldr	r2, [pc, #208]	; (800251c <TIM_Base_SetConfig+0xe4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d008      	beq.n	8002462 <TIM_Base_SetConfig+0x2a>
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	05db      	lsls	r3, r3, #23
 8002456:	429a      	cmp	r2, r3
 8002458:	d003      	beq.n	8002462 <TIM_Base_SetConfig+0x2a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a30      	ldr	r2, [pc, #192]	; (8002520 <TIM_Base_SetConfig+0xe8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d108      	bne.n	8002474 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2270      	movs	r2, #112	; 0x70
 8002466:	4393      	bics	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a29      	ldr	r2, [pc, #164]	; (800251c <TIM_Base_SetConfig+0xe4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d018      	beq.n	80024ae <TIM_Base_SetConfig+0x76>
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	05db      	lsls	r3, r3, #23
 8002482:	429a      	cmp	r2, r3
 8002484:	d013      	beq.n	80024ae <TIM_Base_SetConfig+0x76>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a25      	ldr	r2, [pc, #148]	; (8002520 <TIM_Base_SetConfig+0xe8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00f      	beq.n	80024ae <TIM_Base_SetConfig+0x76>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a24      	ldr	r2, [pc, #144]	; (8002524 <TIM_Base_SetConfig+0xec>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00b      	beq.n	80024ae <TIM_Base_SetConfig+0x76>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a23      	ldr	r2, [pc, #140]	; (8002528 <TIM_Base_SetConfig+0xf0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <TIM_Base_SetConfig+0x76>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a22      	ldr	r2, [pc, #136]	; (800252c <TIM_Base_SetConfig+0xf4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0x76>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a21      	ldr	r2, [pc, #132]	; (8002530 <TIM_Base_SetConfig+0xf8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d108      	bne.n	80024c0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a20      	ldr	r2, [pc, #128]	; (8002534 <TIM_Base_SetConfig+0xfc>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	4393      	bics	r3, r2
 80024c6:	001a      	movs	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a0c      	ldr	r2, [pc, #48]	; (800251c <TIM_Base_SetConfig+0xe4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00b      	beq.n	8002506 <TIM_Base_SetConfig+0xce>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <TIM_Base_SetConfig+0xf0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <TIM_Base_SetConfig+0xce>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a0c      	ldr	r2, [pc, #48]	; (800252c <TIM_Base_SetConfig+0xf4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d003      	beq.n	8002506 <TIM_Base_SetConfig+0xce>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <TIM_Base_SetConfig+0xf8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d103      	bne.n	800250e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	615a      	str	r2, [r3, #20]
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b004      	add	sp, #16
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40012c00 	.word	0x40012c00
 8002520:	40000400 	.word	0x40000400
 8002524:	40002000 	.word	0x40002000
 8002528:	40014000 	.word	0x40014000
 800252c:	40014400 	.word	0x40014400
 8002530:	40014800 	.word	0x40014800
 8002534:	fffffcff 	.word	0xfffffcff

08002538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e044      	b.n	80025d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2274      	movs	r2, #116	; 0x74
 8002556:	2100      	movs	r1, #0
 8002558:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f7fe fcfd 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2224      	movs	r2, #36	; 0x24
 8002566:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2101      	movs	r1, #1
 8002574:	438a      	bics	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	0018      	movs	r0, r3
 800257c:	f000 f8da 	bl	8002734 <UART_SetConfig>
 8002580:	0003      	movs	r3, r0
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e024      	b.n	80025d4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f000 fab5 	bl	8002b04 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	490d      	ldr	r1, [pc, #52]	; (80025dc <HAL_UART_Init+0xa4>)
 80025a6:	400a      	ands	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	212a      	movs	r1, #42	; 0x2a
 80025b6:	438a      	bics	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2101      	movs	r1, #1
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 fb4d 	bl	8002c6c <UART_CheckIdleState>
 80025d2:	0003      	movs	r3, r0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	ffffb7ff 	.word	0xffffb7ff

080025e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	1dbb      	adds	r3, r7, #6
 80025ee:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d000      	beq.n	80025fa <HAL_UART_Transmit+0x1a>
 80025f8:	e096      	b.n	8002728 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_UART_Transmit+0x28>
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e08e      	b.n	800272a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	015b      	lsls	r3, r3, #5
 8002614:	429a      	cmp	r2, r3
 8002616:	d109      	bne.n	800262c <HAL_UART_Transmit+0x4c>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2201      	movs	r2, #1
 8002624:	4013      	ands	r3, r2
 8002626:	d001      	beq.n	800262c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e07e      	b.n	800272a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2274      	movs	r2, #116	; 0x74
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_UART_Transmit+0x5a>
 8002636:	2302      	movs	r3, #2
 8002638:	e077      	b.n	800272a <HAL_UART_Transmit+0x14a>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2274      	movs	r2, #116	; 0x74
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	2100      	movs	r1, #0
 8002648:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2221      	movs	r2, #33	; 0x21
 800264e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002650:	f7fe fda8 	bl	80011a4 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1dba      	adds	r2, r7, #6
 800265c:	2150      	movs	r1, #80	; 0x50
 800265e:	8812      	ldrh	r2, [r2, #0]
 8002660:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1dba      	adds	r2, r7, #6
 8002666:	2152      	movs	r1, #82	; 0x52
 8002668:	8812      	ldrh	r2, [r2, #0]
 800266a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	015b      	lsls	r3, r3, #5
 8002674:	429a      	cmp	r2, r3
 8002676:	d108      	bne.n	800268a <HAL_UART_Transmit+0xaa>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d104      	bne.n	800268a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	e003      	b.n	8002692 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2274      	movs	r2, #116	; 0x74
 8002696:	2100      	movs	r1, #0
 8002698:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800269a:	e02d      	b.n	80026f8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	0013      	movs	r3, r2
 80026a6:	2200      	movs	r2, #0
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	f000 fb27 	bl	8002cfc <UART_WaitOnFlagUntilTimeout>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e039      	b.n	800272a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	881a      	ldrh	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	05d2      	lsls	r2, r2, #23
 80026c6:	0dd2      	lsrs	r2, r2, #23
 80026c8:	b292      	uxth	r2, r2
 80026ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	3302      	adds	r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	e008      	b.n	80026e6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	b292      	uxth	r2, r2
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	3301      	adds	r3, #1
 80026e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2252      	movs	r2, #82	; 0x52
 80026ea:	5a9b      	ldrh	r3, [r3, r2]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b299      	uxth	r1, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2252      	movs	r2, #82	; 0x52
 80026f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2252      	movs	r2, #82	; 0x52
 80026fc:	5a9b      	ldrh	r3, [r3, r2]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1cb      	bne.n	800269c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	0013      	movs	r3, r2
 800270e:	2200      	movs	r2, #0
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	f000 faf3 	bl	8002cfc <UART_WaitOnFlagUntilTimeout>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d001      	beq.n	800271e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e005      	b.n	800272a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	e000      	b.n	800272a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002728:	2302      	movs	r3, #2
  }
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b008      	add	sp, #32
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800273c:	231e      	movs	r3, #30
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4abe      	ldr	r2, [pc, #760]	; (8002a5c <UART_SetConfig+0x328>)
 8002764:	4013      	ands	r3, r2
 8002766:	0019      	movs	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4ab9      	ldr	r2, [pc, #740]	; (8002a60 <UART_SetConfig+0x32c>)
 800277a:	4013      	ands	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4ab0      	ldr	r2, [pc, #704]	; (8002a64 <UART_SetConfig+0x330>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4aac      	ldr	r2, [pc, #688]	; (8002a68 <UART_SetConfig+0x334>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d127      	bne.n	800280a <UART_SetConfig+0xd6>
 80027ba:	4bac      	ldr	r3, [pc, #688]	; (8002a6c <UART_SetConfig+0x338>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	2203      	movs	r2, #3
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d00d      	beq.n	80027e2 <UART_SetConfig+0xae>
 80027c6:	d81b      	bhi.n	8002800 <UART_SetConfig+0xcc>
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d014      	beq.n	80027f6 <UART_SetConfig+0xc2>
 80027cc:	d818      	bhi.n	8002800 <UART_SetConfig+0xcc>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <UART_SetConfig+0xa4>
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d00a      	beq.n	80027ec <UART_SetConfig+0xb8>
 80027d6:	e013      	b.n	8002800 <UART_SetConfig+0xcc>
 80027d8:	231f      	movs	r3, #31
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e0bd      	b.n	800295e <UART_SetConfig+0x22a>
 80027e2:	231f      	movs	r3, #31
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	2202      	movs	r2, #2
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	e0b8      	b.n	800295e <UART_SetConfig+0x22a>
 80027ec:	231f      	movs	r3, #31
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2204      	movs	r2, #4
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	e0b3      	b.n	800295e <UART_SetConfig+0x22a>
 80027f6:	231f      	movs	r3, #31
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2208      	movs	r2, #8
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e0ae      	b.n	800295e <UART_SetConfig+0x22a>
 8002800:	231f      	movs	r3, #31
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	2210      	movs	r2, #16
 8002806:	701a      	strb	r2, [r3, #0]
 8002808:	e0a9      	b.n	800295e <UART_SetConfig+0x22a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a98      	ldr	r2, [pc, #608]	; (8002a70 <UART_SetConfig+0x33c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d134      	bne.n	800287e <UART_SetConfig+0x14a>
 8002814:	4b95      	ldr	r3, [pc, #596]	; (8002a6c <UART_SetConfig+0x338>)
 8002816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002818:	23c0      	movs	r3, #192	; 0xc0
 800281a:	029b      	lsls	r3, r3, #10
 800281c:	4013      	ands	r3, r2
 800281e:	22c0      	movs	r2, #192	; 0xc0
 8002820:	0292      	lsls	r2, r2, #10
 8002822:	4293      	cmp	r3, r2
 8002824:	d017      	beq.n	8002856 <UART_SetConfig+0x122>
 8002826:	22c0      	movs	r2, #192	; 0xc0
 8002828:	0292      	lsls	r2, r2, #10
 800282a:	4293      	cmp	r3, r2
 800282c:	d822      	bhi.n	8002874 <UART_SetConfig+0x140>
 800282e:	2280      	movs	r2, #128	; 0x80
 8002830:	0292      	lsls	r2, r2, #10
 8002832:	4293      	cmp	r3, r2
 8002834:	d019      	beq.n	800286a <UART_SetConfig+0x136>
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	0292      	lsls	r2, r2, #10
 800283a:	4293      	cmp	r3, r2
 800283c:	d81a      	bhi.n	8002874 <UART_SetConfig+0x140>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d004      	beq.n	800284c <UART_SetConfig+0x118>
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	0252      	lsls	r2, r2, #9
 8002846:	4293      	cmp	r3, r2
 8002848:	d00a      	beq.n	8002860 <UART_SetConfig+0x12c>
 800284a:	e013      	b.n	8002874 <UART_SetConfig+0x140>
 800284c:	231f      	movs	r3, #31
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e083      	b.n	800295e <UART_SetConfig+0x22a>
 8002856:	231f      	movs	r3, #31
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2202      	movs	r2, #2
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e07e      	b.n	800295e <UART_SetConfig+0x22a>
 8002860:	231f      	movs	r3, #31
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2204      	movs	r2, #4
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e079      	b.n	800295e <UART_SetConfig+0x22a>
 800286a:	231f      	movs	r3, #31
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2208      	movs	r2, #8
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e074      	b.n	800295e <UART_SetConfig+0x22a>
 8002874:	231f      	movs	r3, #31
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	2210      	movs	r2, #16
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e06f      	b.n	800295e <UART_SetConfig+0x22a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a7c      	ldr	r2, [pc, #496]	; (8002a74 <UART_SetConfig+0x340>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d134      	bne.n	80028f2 <UART_SetConfig+0x1be>
 8002888:	4b78      	ldr	r3, [pc, #480]	; (8002a6c <UART_SetConfig+0x338>)
 800288a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288c:	23c0      	movs	r3, #192	; 0xc0
 800288e:	031b      	lsls	r3, r3, #12
 8002890:	4013      	ands	r3, r2
 8002892:	22c0      	movs	r2, #192	; 0xc0
 8002894:	0312      	lsls	r2, r2, #12
 8002896:	4293      	cmp	r3, r2
 8002898:	d017      	beq.n	80028ca <UART_SetConfig+0x196>
 800289a:	22c0      	movs	r2, #192	; 0xc0
 800289c:	0312      	lsls	r2, r2, #12
 800289e:	4293      	cmp	r3, r2
 80028a0:	d822      	bhi.n	80028e8 <UART_SetConfig+0x1b4>
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	0312      	lsls	r2, r2, #12
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d019      	beq.n	80028de <UART_SetConfig+0x1aa>
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	0312      	lsls	r2, r2, #12
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d81a      	bhi.n	80028e8 <UART_SetConfig+0x1b4>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <UART_SetConfig+0x18c>
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	02d2      	lsls	r2, r2, #11
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00a      	beq.n	80028d4 <UART_SetConfig+0x1a0>
 80028be:	e013      	b.n	80028e8 <UART_SetConfig+0x1b4>
 80028c0:	231f      	movs	r3, #31
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e049      	b.n	800295e <UART_SetConfig+0x22a>
 80028ca:	231f      	movs	r3, #31
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	2202      	movs	r2, #2
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e044      	b.n	800295e <UART_SetConfig+0x22a>
 80028d4:	231f      	movs	r3, #31
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	2204      	movs	r2, #4
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e03f      	b.n	800295e <UART_SetConfig+0x22a>
 80028de:	231f      	movs	r3, #31
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	2208      	movs	r2, #8
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e03a      	b.n	800295e <UART_SetConfig+0x22a>
 80028e8:	231f      	movs	r3, #31
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2210      	movs	r2, #16
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e035      	b.n	800295e <UART_SetConfig+0x22a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a60      	ldr	r2, [pc, #384]	; (8002a78 <UART_SetConfig+0x344>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d104      	bne.n	8002906 <UART_SetConfig+0x1d2>
 80028fc:	231f      	movs	r3, #31
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	e02b      	b.n	800295e <UART_SetConfig+0x22a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5c      	ldr	r2, [pc, #368]	; (8002a7c <UART_SetConfig+0x348>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d104      	bne.n	800291a <UART_SetConfig+0x1e6>
 8002910:	231f      	movs	r3, #31
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	e021      	b.n	800295e <UART_SetConfig+0x22a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <UART_SetConfig+0x34c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d104      	bne.n	800292e <UART_SetConfig+0x1fa>
 8002924:	231f      	movs	r3, #31
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	e017      	b.n	800295e <UART_SetConfig+0x22a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a54      	ldr	r2, [pc, #336]	; (8002a84 <UART_SetConfig+0x350>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d104      	bne.n	8002942 <UART_SetConfig+0x20e>
 8002938:	231f      	movs	r3, #31
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e00d      	b.n	800295e <UART_SetConfig+0x22a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a50      	ldr	r2, [pc, #320]	; (8002a88 <UART_SetConfig+0x354>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d104      	bne.n	8002956 <UART_SetConfig+0x222>
 800294c:	231f      	movs	r3, #31
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e003      	b.n	800295e <UART_SetConfig+0x22a>
 8002956:	231f      	movs	r3, #31
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	2210      	movs	r2, #16
 800295c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	429a      	cmp	r2, r3
 8002968:	d15d      	bne.n	8002a26 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 800296a:	231f      	movs	r3, #31
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d015      	beq.n	80029a0 <UART_SetConfig+0x26c>
 8002974:	dc18      	bgt.n	80029a8 <UART_SetConfig+0x274>
 8002976:	2b04      	cmp	r3, #4
 8002978:	d00d      	beq.n	8002996 <UART_SetConfig+0x262>
 800297a:	dc15      	bgt.n	80029a8 <UART_SetConfig+0x274>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <UART_SetConfig+0x252>
 8002980:	2b02      	cmp	r3, #2
 8002982:	d005      	beq.n	8002990 <UART_SetConfig+0x25c>
 8002984:	e010      	b.n	80029a8 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002986:	f7ff fba7 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 800298a:	0003      	movs	r3, r0
 800298c:	61bb      	str	r3, [r7, #24]
        break;
 800298e:	e012      	b.n	80029b6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002990:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <UART_SetConfig+0x358>)
 8002992:	61bb      	str	r3, [r7, #24]
        break;
 8002994:	e00f      	b.n	80029b6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002996:	f7ff fb15 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 800299a:	0003      	movs	r3, r0
 800299c:	61bb      	str	r3, [r7, #24]
        break;
 800299e:	e00a      	b.n	80029b6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	61bb      	str	r3, [r7, #24]
        break;
 80029a6:	e006      	b.n	80029b6 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029ac:	231e      	movs	r3, #30
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
        break;
 80029b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d100      	bne.n	80029be <UART_SetConfig+0x28a>
 80029bc:	e095      	b.n	8002aea <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	005a      	lsls	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	18d2      	adds	r2, r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	0019      	movs	r1, r3
 80029d0:	0010      	movs	r0, r2
 80029d2:	f7fd fba1 	bl	8000118 <__udivsi3>
 80029d6:	0003      	movs	r3, r0
 80029d8:	b29b      	uxth	r3, r3
 80029da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b0f      	cmp	r3, #15
 80029e0:	d91c      	bls.n	8002a1c <UART_SetConfig+0x2e8>
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	025b      	lsls	r3, r3, #9
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d217      	bcs.n	8002a1c <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	200e      	movs	r0, #14
 80029f2:	183b      	adds	r3, r7, r0
 80029f4:	210f      	movs	r1, #15
 80029f6:	438a      	bics	r2, r1
 80029f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2207      	movs	r2, #7
 8002a02:	4013      	ands	r3, r2
 8002a04:	b299      	uxth	r1, r3
 8002a06:	183b      	adds	r3, r7, r0
 8002a08:	183a      	adds	r2, r7, r0
 8002a0a:	8812      	ldrh	r2, [r2, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	183a      	adds	r2, r7, r0
 8002a16:	8812      	ldrh	r2, [r2, #0]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	e066      	b.n	8002aea <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002a1c:	231e      	movs	r3, #30
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e061      	b.n	8002aea <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a26:	231f      	movs	r3, #31
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d02f      	beq.n	8002a90 <UART_SetConfig+0x35c>
 8002a30:	dc32      	bgt.n	8002a98 <UART_SetConfig+0x364>
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d00d      	beq.n	8002a52 <UART_SetConfig+0x31e>
 8002a36:	dc2f      	bgt.n	8002a98 <UART_SetConfig+0x364>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <UART_SetConfig+0x30e>
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d005      	beq.n	8002a4c <UART_SetConfig+0x318>
 8002a40:	e02a      	b.n	8002a98 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a42:	f7ff fb49 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8002a46:	0003      	movs	r3, r0
 8002a48:	61bb      	str	r3, [r7, #24]
        break;
 8002a4a:	e02c      	b.n	8002aa6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <UART_SetConfig+0x358>)
 8002a4e:	61bb      	str	r3, [r7, #24]
        break;
 8002a50:	e029      	b.n	8002aa6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a52:	f7ff fab7 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8002a56:	0003      	movs	r3, r0
 8002a58:	61bb      	str	r3, [r7, #24]
        break;
 8002a5a:	e024      	b.n	8002aa6 <UART_SetConfig+0x372>
 8002a5c:	efff69f3 	.word	0xefff69f3
 8002a60:	ffffcfff 	.word	0xffffcfff
 8002a64:	fffff4ff 	.word	0xfffff4ff
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40004400 	.word	0x40004400
 8002a74:	40004800 	.word	0x40004800
 8002a78:	40004c00 	.word	0x40004c00
 8002a7c:	40005000 	.word	0x40005000
 8002a80:	40011400 	.word	0x40011400
 8002a84:	40011800 	.word	0x40011800
 8002a88:	40011c00 	.word	0x40011c00
 8002a8c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	61bb      	str	r3, [r7, #24]
        break;
 8002a96:	e006      	b.n	8002aa6 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a9c:	231e      	movs	r3, #30
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
        break;
 8002aa4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01e      	beq.n	8002aea <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	085a      	lsrs	r2, r3, #1
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	18d2      	adds	r2, r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	0019      	movs	r1, r3
 8002abc:	0010      	movs	r0, r2
 8002abe:	f7fd fb2b 	bl	8000118 <__udivsi3>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b0f      	cmp	r3, #15
 8002acc:	d909      	bls.n	8002ae2 <UART_SetConfig+0x3ae>
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	025b      	lsls	r3, r3, #9
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d204      	bcs.n	8002ae2 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	60da      	str	r2, [r3, #12]
 8002ae0:	e003      	b.n	8002aea <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002ae2:	231e      	movs	r3, #30
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002af6:	231e      	movs	r3, #30
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	781b      	ldrb	r3, [r3, #0]
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b008      	add	sp, #32
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	2201      	movs	r2, #1
 8002b12:	4013      	ands	r3, r2
 8002b14:	d00b      	beq.n	8002b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a4a      	ldr	r2, [pc, #296]	; (8002c48 <UART_AdvFeatureConfig+0x144>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	2202      	movs	r2, #2
 8002b34:	4013      	ands	r3, r2
 8002b36:	d00b      	beq.n	8002b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a43      	ldr	r2, [pc, #268]	; (8002c4c <UART_AdvFeatureConfig+0x148>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	2204      	movs	r2, #4
 8002b56:	4013      	ands	r3, r2
 8002b58:	d00b      	beq.n	8002b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <UART_AdvFeatureConfig+0x14c>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	0019      	movs	r1, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2208      	movs	r2, #8
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d00b      	beq.n	8002b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4a34      	ldr	r2, [pc, #208]	; (8002c54 <UART_AdvFeatureConfig+0x150>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	0019      	movs	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2210      	movs	r2, #16
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d00b      	beq.n	8002bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a2c      	ldr	r2, [pc, #176]	; (8002c58 <UART_AdvFeatureConfig+0x154>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2220      	movs	r2, #32
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d00b      	beq.n	8002bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <UART_AdvFeatureConfig+0x158>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	0019      	movs	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	2240      	movs	r2, #64	; 0x40
 8002bde:	4013      	ands	r3, r2
 8002be0:	d01d      	beq.n	8002c1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <UART_AdvFeatureConfig+0x15c>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	0019      	movs	r1, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	035b      	lsls	r3, r3, #13
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d10b      	bne.n	8002c1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <UART_AdvFeatureConfig+0x160>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	0019      	movs	r1, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	4013      	ands	r3, r2
 8002c26:	d00b      	beq.n	8002c40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <UART_AdvFeatureConfig+0x164>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	0019      	movs	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	605a      	str	r2, [r3, #4]
  }
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	fffdffff 	.word	0xfffdffff
 8002c4c:	fffeffff 	.word	0xfffeffff
 8002c50:	fffbffff 	.word	0xfffbffff
 8002c54:	ffff7fff 	.word	0xffff7fff
 8002c58:	ffffefff 	.word	0xffffefff
 8002c5c:	ffffdfff 	.word	0xffffdfff
 8002c60:	ffefffff 	.word	0xffefffff
 8002c64:	ff9fffff 	.word	0xff9fffff
 8002c68:	fff7ffff 	.word	0xfff7ffff

08002c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	2100      	movs	r1, #0
 8002c7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c7c:	f7fe fa92 	bl	80011a4 <HAL_GetTick>
 8002c80:	0003      	movs	r3, r0
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d10c      	bne.n	8002cac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2280      	movs	r2, #128	; 0x80
 8002c96:	0391      	lsls	r1, r2, #14
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <UART_CheckIdleState+0x8c>)
 8002c9c:	9200      	str	r2, [sp, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f000 f82c 	bl	8002cfc <UART_WaitOnFlagUntilTimeout>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d001      	beq.n	8002cac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e021      	b.n	8002cf0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d10c      	bne.n	8002cd4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	03d1      	lsls	r1, r2, #15
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <UART_CheckIdleState+0x8c>)
 8002cc4:	9200      	str	r2, [sp, #0]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f000 f818 	bl	8002cfc <UART_WaitOnFlagUntilTimeout>
 8002ccc:	1e03      	subs	r3, r0, #0
 8002cce:	d001      	beq.n	8002cd4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e00d      	b.n	8002cf0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2274      	movs	r2, #116	; 0x74
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b004      	add	sp, #16
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	01ffffff 	.word	0x01ffffff

08002cfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b094      	sub	sp, #80	; 0x50
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	1dfb      	adds	r3, r7, #7
 8002d0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d0c:	e0a3      	b.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d10:	3301      	adds	r3, #1
 8002d12:	d100      	bne.n	8002d16 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002d14:	e09f      	b.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7fe fa45 	bl	80011a4 <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d13d      	bne.n	8002da8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
 8002d36:	2301      	movs	r3, #1
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	f383 8810 	msr	PRIMASK, r3
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	494c      	ldr	r1, [pc, #304]	; (8002e80 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002d4e:	400a      	ands	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	f383 8810 	msr	PRIMASK, r3
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d66:	643b      	str	r3, [r7, #64]	; 0x40
 8002d68:	2301      	movs	r3, #1
 8002d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	f383 8810 	msr	PRIMASK, r3
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	438a      	bics	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8a:	f383 8810 	msr	PRIMASK, r3
}
 8002d8e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2274      	movs	r2, #116	; 0x74
 8002da0:	2100      	movs	r1, #0
 8002da2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e067      	b.n	8002e78 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2204      	movs	r2, #4
 8002db0:	4013      	ands	r3, r2
 8002db2:	d050      	beq.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d146      	bne.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	0112      	lsls	r2, r2, #4
 8002dd0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd6:	613b      	str	r3, [r7, #16]
  return(result);
 8002dd8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ddc:	2301      	movs	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f383 8810 	msr	PRIMASK, r3
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4923      	ldr	r1, [pc, #140]	; (8002e80 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002df4:	400a      	ands	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f383 8810 	msr	PRIMASK, r3
}
 8002e02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e04:	f3ef 8310 	mrs	r3, PRIMASK
 8002e08:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e0a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e0e:	2301      	movs	r3, #1
 8002e10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f383 8810 	msr	PRIMASK, r3
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	438a      	bics	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f383 8810 	msr	PRIMASK, r3
}
 8002e34:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	2120      	movs	r1, #32
 8002e48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2274      	movs	r2, #116	; 0x74
 8002e4e:	2100      	movs	r1, #0
 8002e50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e010      	b.n	8002e78 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	425a      	negs	r2, r3
 8002e66:	4153      	adcs	r3, r2
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	1dfb      	adds	r3, r7, #7
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d100      	bne.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002e74:	e74b      	b.n	8002d0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b014      	add	sp, #80	; 0x50
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	fffffe5f 	.word	0xfffffe5f

08002e84 <__errno>:
 8002e84:	4b01      	ldr	r3, [pc, #4]	; (8002e8c <__errno+0x8>)
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	4770      	bx	lr
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	2000000c 	.word	0x2000000c

08002e90 <__libc_init_array>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	2600      	movs	r6, #0
 8002e94:	4d0c      	ldr	r5, [pc, #48]	; (8002ec8 <__libc_init_array+0x38>)
 8002e96:	4c0d      	ldr	r4, [pc, #52]	; (8002ecc <__libc_init_array+0x3c>)
 8002e98:	1b64      	subs	r4, r4, r5
 8002e9a:	10a4      	asrs	r4, r4, #2
 8002e9c:	42a6      	cmp	r6, r4
 8002e9e:	d109      	bne.n	8002eb4 <__libc_init_array+0x24>
 8002ea0:	2600      	movs	r6, #0
 8002ea2:	f000 fc8b 	bl	80037bc <_init>
 8002ea6:	4d0a      	ldr	r5, [pc, #40]	; (8002ed0 <__libc_init_array+0x40>)
 8002ea8:	4c0a      	ldr	r4, [pc, #40]	; (8002ed4 <__libc_init_array+0x44>)
 8002eaa:	1b64      	subs	r4, r4, r5
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	42a6      	cmp	r6, r4
 8002eb0:	d105      	bne.n	8002ebe <__libc_init_array+0x2e>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	00b3      	lsls	r3, r6, #2
 8002eb6:	58eb      	ldr	r3, [r5, r3]
 8002eb8:	4798      	blx	r3
 8002eba:	3601      	adds	r6, #1
 8002ebc:	e7ee      	b.n	8002e9c <__libc_init_array+0xc>
 8002ebe:	00b3      	lsls	r3, r6, #2
 8002ec0:	58eb      	ldr	r3, [r5, r3]
 8002ec2:	4798      	blx	r3
 8002ec4:	3601      	adds	r6, #1
 8002ec6:	e7f2      	b.n	8002eae <__libc_init_array+0x1e>
 8002ec8:	08003858 	.word	0x08003858
 8002ecc:	08003858 	.word	0x08003858
 8002ed0:	08003858 	.word	0x08003858
 8002ed4:	0800385c 	.word	0x0800385c

08002ed8 <memset>:
 8002ed8:	0003      	movs	r3, r0
 8002eda:	1882      	adds	r2, r0, r2
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d100      	bne.n	8002ee2 <memset+0xa>
 8002ee0:	4770      	bx	lr
 8002ee2:	7019      	strb	r1, [r3, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	e7f9      	b.n	8002edc <memset+0x4>

08002ee8 <siprintf>:
 8002ee8:	b40e      	push	{r1, r2, r3}
 8002eea:	b500      	push	{lr}
 8002eec:	490b      	ldr	r1, [pc, #44]	; (8002f1c <siprintf+0x34>)
 8002eee:	b09c      	sub	sp, #112	; 0x70
 8002ef0:	ab1d      	add	r3, sp, #116	; 0x74
 8002ef2:	9002      	str	r0, [sp, #8]
 8002ef4:	9006      	str	r0, [sp, #24]
 8002ef6:	9107      	str	r1, [sp, #28]
 8002ef8:	9104      	str	r1, [sp, #16]
 8002efa:	4809      	ldr	r0, [pc, #36]	; (8002f20 <siprintf+0x38>)
 8002efc:	4909      	ldr	r1, [pc, #36]	; (8002f24 <siprintf+0x3c>)
 8002efe:	cb04      	ldmia	r3!, {r2}
 8002f00:	9105      	str	r1, [sp, #20]
 8002f02:	6800      	ldr	r0, [r0, #0]
 8002f04:	a902      	add	r1, sp, #8
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	f000 f870 	bl	8002fec <_svfiprintf_r>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9a02      	ldr	r2, [sp, #8]
 8002f10:	7013      	strb	r3, [r2, #0]
 8002f12:	b01c      	add	sp, #112	; 0x70
 8002f14:	bc08      	pop	{r3}
 8002f16:	b003      	add	sp, #12
 8002f18:	4718      	bx	r3
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	7fffffff 	.word	0x7fffffff
 8002f20:	2000000c 	.word	0x2000000c
 8002f24:	ffff0208 	.word	0xffff0208

08002f28 <__ssputs_r>:
 8002f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2a:	688e      	ldr	r6, [r1, #8]
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	0007      	movs	r7, r0
 8002f30:	000c      	movs	r4, r1
 8002f32:	9203      	str	r2, [sp, #12]
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	429e      	cmp	r6, r3
 8002f38:	d83c      	bhi.n	8002fb4 <__ssputs_r+0x8c>
 8002f3a:	2390      	movs	r3, #144	; 0x90
 8002f3c:	898a      	ldrh	r2, [r1, #12]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	421a      	tst	r2, r3
 8002f42:	d034      	beq.n	8002fae <__ssputs_r+0x86>
 8002f44:	6909      	ldr	r1, [r1, #16]
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	6960      	ldr	r0, [r4, #20]
 8002f4a:	1a5b      	subs	r3, r3, r1
 8002f4c:	9302      	str	r3, [sp, #8]
 8002f4e:	2303      	movs	r3, #3
 8002f50:	4343      	muls	r3, r0
 8002f52:	0fdd      	lsrs	r5, r3, #31
 8002f54:	18ed      	adds	r5, r5, r3
 8002f56:	9b01      	ldr	r3, [sp, #4]
 8002f58:	9802      	ldr	r0, [sp, #8]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	181b      	adds	r3, r3, r0
 8002f5e:	106d      	asrs	r5, r5, #1
 8002f60:	42ab      	cmp	r3, r5
 8002f62:	d900      	bls.n	8002f66 <__ssputs_r+0x3e>
 8002f64:	001d      	movs	r5, r3
 8002f66:	0553      	lsls	r3, r2, #21
 8002f68:	d532      	bpl.n	8002fd0 <__ssputs_r+0xa8>
 8002f6a:	0029      	movs	r1, r5
 8002f6c:	0038      	movs	r0, r7
 8002f6e:	f000 fb53 	bl	8003618 <_malloc_r>
 8002f72:	1e06      	subs	r6, r0, #0
 8002f74:	d109      	bne.n	8002f8a <__ssputs_r+0x62>
 8002f76:	230c      	movs	r3, #12
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	2340      	movs	r3, #64	; 0x40
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	89a2      	ldrh	r2, [r4, #12]
 8002f80:	4240      	negs	r0, r0
 8002f82:	4313      	orrs	r3, r2
 8002f84:	81a3      	strh	r3, [r4, #12]
 8002f86:	b005      	add	sp, #20
 8002f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f8a:	9a02      	ldr	r2, [sp, #8]
 8002f8c:	6921      	ldr	r1, [r4, #16]
 8002f8e:	f000 faba 	bl	8003506 <memcpy>
 8002f92:	89a3      	ldrh	r3, [r4, #12]
 8002f94:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <__ssputs_r+0xc0>)
 8002f96:	401a      	ands	r2, r3
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	81a3      	strh	r3, [r4, #12]
 8002f9e:	9b02      	ldr	r3, [sp, #8]
 8002fa0:	6126      	str	r6, [r4, #16]
 8002fa2:	18f6      	adds	r6, r6, r3
 8002fa4:	6026      	str	r6, [r4, #0]
 8002fa6:	6165      	str	r5, [r4, #20]
 8002fa8:	9e01      	ldr	r6, [sp, #4]
 8002faa:	1aed      	subs	r5, r5, r3
 8002fac:	60a5      	str	r5, [r4, #8]
 8002fae:	9b01      	ldr	r3, [sp, #4]
 8002fb0:	429e      	cmp	r6, r3
 8002fb2:	d900      	bls.n	8002fb6 <__ssputs_r+0x8e>
 8002fb4:	9e01      	ldr	r6, [sp, #4]
 8002fb6:	0032      	movs	r2, r6
 8002fb8:	9903      	ldr	r1, [sp, #12]
 8002fba:	6820      	ldr	r0, [r4, #0]
 8002fbc:	f000 faac 	bl	8003518 <memmove>
 8002fc0:	68a3      	ldr	r3, [r4, #8]
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	1b9b      	subs	r3, r3, r6
 8002fc6:	60a3      	str	r3, [r4, #8]
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	199e      	adds	r6, r3, r6
 8002fcc:	6026      	str	r6, [r4, #0]
 8002fce:	e7da      	b.n	8002f86 <__ssputs_r+0x5e>
 8002fd0:	002a      	movs	r2, r5
 8002fd2:	0038      	movs	r0, r7
 8002fd4:	f000 fb96 	bl	8003704 <_realloc_r>
 8002fd8:	1e06      	subs	r6, r0, #0
 8002fda:	d1e0      	bne.n	8002f9e <__ssputs_r+0x76>
 8002fdc:	0038      	movs	r0, r7
 8002fde:	6921      	ldr	r1, [r4, #16]
 8002fe0:	f000 faae 	bl	8003540 <_free_r>
 8002fe4:	e7c7      	b.n	8002f76 <__ssputs_r+0x4e>
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	fffffb7f 	.word	0xfffffb7f

08002fec <_svfiprintf_r>:
 8002fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fee:	b0a1      	sub	sp, #132	; 0x84
 8002ff0:	9003      	str	r0, [sp, #12]
 8002ff2:	001d      	movs	r5, r3
 8002ff4:	898b      	ldrh	r3, [r1, #12]
 8002ff6:	000f      	movs	r7, r1
 8002ff8:	0016      	movs	r6, r2
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	d511      	bpl.n	8003022 <_svfiprintf_r+0x36>
 8002ffe:	690b      	ldr	r3, [r1, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10e      	bne.n	8003022 <_svfiprintf_r+0x36>
 8003004:	2140      	movs	r1, #64	; 0x40
 8003006:	f000 fb07 	bl	8003618 <_malloc_r>
 800300a:	6038      	str	r0, [r7, #0]
 800300c:	6138      	str	r0, [r7, #16]
 800300e:	2800      	cmp	r0, #0
 8003010:	d105      	bne.n	800301e <_svfiprintf_r+0x32>
 8003012:	230c      	movs	r3, #12
 8003014:	9a03      	ldr	r2, [sp, #12]
 8003016:	3801      	subs	r0, #1
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	b021      	add	sp, #132	; 0x84
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800301e:	2340      	movs	r3, #64	; 0x40
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	2300      	movs	r3, #0
 8003024:	ac08      	add	r4, sp, #32
 8003026:	6163      	str	r3, [r4, #20]
 8003028:	3320      	adds	r3, #32
 800302a:	7663      	strb	r3, [r4, #25]
 800302c:	3310      	adds	r3, #16
 800302e:	76a3      	strb	r3, [r4, #26]
 8003030:	9507      	str	r5, [sp, #28]
 8003032:	0035      	movs	r5, r6
 8003034:	782b      	ldrb	r3, [r5, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <_svfiprintf_r+0x52>
 800303a:	2b25      	cmp	r3, #37	; 0x25
 800303c:	d147      	bne.n	80030ce <_svfiprintf_r+0xe2>
 800303e:	1bab      	subs	r3, r5, r6
 8003040:	9305      	str	r3, [sp, #20]
 8003042:	42b5      	cmp	r5, r6
 8003044:	d00c      	beq.n	8003060 <_svfiprintf_r+0x74>
 8003046:	0032      	movs	r2, r6
 8003048:	0039      	movs	r1, r7
 800304a:	9803      	ldr	r0, [sp, #12]
 800304c:	f7ff ff6c 	bl	8002f28 <__ssputs_r>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	d100      	bne.n	8003056 <_svfiprintf_r+0x6a>
 8003054:	e0ae      	b.n	80031b4 <_svfiprintf_r+0x1c8>
 8003056:	6962      	ldr	r2, [r4, #20]
 8003058:	9b05      	ldr	r3, [sp, #20]
 800305a:	4694      	mov	ip, r2
 800305c:	4463      	add	r3, ip
 800305e:	6163      	str	r3, [r4, #20]
 8003060:	782b      	ldrb	r3, [r5, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d100      	bne.n	8003068 <_svfiprintf_r+0x7c>
 8003066:	e0a5      	b.n	80031b4 <_svfiprintf_r+0x1c8>
 8003068:	2201      	movs	r2, #1
 800306a:	2300      	movs	r3, #0
 800306c:	4252      	negs	r2, r2
 800306e:	6062      	str	r2, [r4, #4]
 8003070:	a904      	add	r1, sp, #16
 8003072:	3254      	adds	r2, #84	; 0x54
 8003074:	1852      	adds	r2, r2, r1
 8003076:	1c6e      	adds	r6, r5, #1
 8003078:	6023      	str	r3, [r4, #0]
 800307a:	60e3      	str	r3, [r4, #12]
 800307c:	60a3      	str	r3, [r4, #8]
 800307e:	7013      	strb	r3, [r2, #0]
 8003080:	65a3      	str	r3, [r4, #88]	; 0x58
 8003082:	2205      	movs	r2, #5
 8003084:	7831      	ldrb	r1, [r6, #0]
 8003086:	4854      	ldr	r0, [pc, #336]	; (80031d8 <_svfiprintf_r+0x1ec>)
 8003088:	f000 fa32 	bl	80034f0 <memchr>
 800308c:	1c75      	adds	r5, r6, #1
 800308e:	2800      	cmp	r0, #0
 8003090:	d11f      	bne.n	80030d2 <_svfiprintf_r+0xe6>
 8003092:	6822      	ldr	r2, [r4, #0]
 8003094:	06d3      	lsls	r3, r2, #27
 8003096:	d504      	bpl.n	80030a2 <_svfiprintf_r+0xb6>
 8003098:	2353      	movs	r3, #83	; 0x53
 800309a:	a904      	add	r1, sp, #16
 800309c:	185b      	adds	r3, r3, r1
 800309e:	2120      	movs	r1, #32
 80030a0:	7019      	strb	r1, [r3, #0]
 80030a2:	0713      	lsls	r3, r2, #28
 80030a4:	d504      	bpl.n	80030b0 <_svfiprintf_r+0xc4>
 80030a6:	2353      	movs	r3, #83	; 0x53
 80030a8:	a904      	add	r1, sp, #16
 80030aa:	185b      	adds	r3, r3, r1
 80030ac:	212b      	movs	r1, #43	; 0x2b
 80030ae:	7019      	strb	r1, [r3, #0]
 80030b0:	7833      	ldrb	r3, [r6, #0]
 80030b2:	2b2a      	cmp	r3, #42	; 0x2a
 80030b4:	d016      	beq.n	80030e4 <_svfiprintf_r+0xf8>
 80030b6:	0035      	movs	r5, r6
 80030b8:	2100      	movs	r1, #0
 80030ba:	200a      	movs	r0, #10
 80030bc:	68e3      	ldr	r3, [r4, #12]
 80030be:	782a      	ldrb	r2, [r5, #0]
 80030c0:	1c6e      	adds	r6, r5, #1
 80030c2:	3a30      	subs	r2, #48	; 0x30
 80030c4:	2a09      	cmp	r2, #9
 80030c6:	d94e      	bls.n	8003166 <_svfiprintf_r+0x17a>
 80030c8:	2900      	cmp	r1, #0
 80030ca:	d111      	bne.n	80030f0 <_svfiprintf_r+0x104>
 80030cc:	e017      	b.n	80030fe <_svfiprintf_r+0x112>
 80030ce:	3501      	adds	r5, #1
 80030d0:	e7b0      	b.n	8003034 <_svfiprintf_r+0x48>
 80030d2:	4b41      	ldr	r3, [pc, #260]	; (80031d8 <_svfiprintf_r+0x1ec>)
 80030d4:	6822      	ldr	r2, [r4, #0]
 80030d6:	1ac0      	subs	r0, r0, r3
 80030d8:	2301      	movs	r3, #1
 80030da:	4083      	lsls	r3, r0
 80030dc:	4313      	orrs	r3, r2
 80030de:	002e      	movs	r6, r5
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	e7ce      	b.n	8003082 <_svfiprintf_r+0x96>
 80030e4:	9b07      	ldr	r3, [sp, #28]
 80030e6:	1d19      	adds	r1, r3, #4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	9107      	str	r1, [sp, #28]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db01      	blt.n	80030f4 <_svfiprintf_r+0x108>
 80030f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80030f2:	e004      	b.n	80030fe <_svfiprintf_r+0x112>
 80030f4:	425b      	negs	r3, r3
 80030f6:	60e3      	str	r3, [r4, #12]
 80030f8:	2302      	movs	r3, #2
 80030fa:	4313      	orrs	r3, r2
 80030fc:	6023      	str	r3, [r4, #0]
 80030fe:	782b      	ldrb	r3, [r5, #0]
 8003100:	2b2e      	cmp	r3, #46	; 0x2e
 8003102:	d10a      	bne.n	800311a <_svfiprintf_r+0x12e>
 8003104:	786b      	ldrb	r3, [r5, #1]
 8003106:	2b2a      	cmp	r3, #42	; 0x2a
 8003108:	d135      	bne.n	8003176 <_svfiprintf_r+0x18a>
 800310a:	9b07      	ldr	r3, [sp, #28]
 800310c:	3502      	adds	r5, #2
 800310e:	1d1a      	adds	r2, r3, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	9207      	str	r2, [sp, #28]
 8003114:	2b00      	cmp	r3, #0
 8003116:	db2b      	blt.n	8003170 <_svfiprintf_r+0x184>
 8003118:	9309      	str	r3, [sp, #36]	; 0x24
 800311a:	4e30      	ldr	r6, [pc, #192]	; (80031dc <_svfiprintf_r+0x1f0>)
 800311c:	2203      	movs	r2, #3
 800311e:	0030      	movs	r0, r6
 8003120:	7829      	ldrb	r1, [r5, #0]
 8003122:	f000 f9e5 	bl	80034f0 <memchr>
 8003126:	2800      	cmp	r0, #0
 8003128:	d006      	beq.n	8003138 <_svfiprintf_r+0x14c>
 800312a:	2340      	movs	r3, #64	; 0x40
 800312c:	1b80      	subs	r0, r0, r6
 800312e:	4083      	lsls	r3, r0
 8003130:	6822      	ldr	r2, [r4, #0]
 8003132:	3501      	adds	r5, #1
 8003134:	4313      	orrs	r3, r2
 8003136:	6023      	str	r3, [r4, #0]
 8003138:	7829      	ldrb	r1, [r5, #0]
 800313a:	2206      	movs	r2, #6
 800313c:	4828      	ldr	r0, [pc, #160]	; (80031e0 <_svfiprintf_r+0x1f4>)
 800313e:	1c6e      	adds	r6, r5, #1
 8003140:	7621      	strb	r1, [r4, #24]
 8003142:	f000 f9d5 	bl	80034f0 <memchr>
 8003146:	2800      	cmp	r0, #0
 8003148:	d03c      	beq.n	80031c4 <_svfiprintf_r+0x1d8>
 800314a:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <_svfiprintf_r+0x1f8>)
 800314c:	2b00      	cmp	r3, #0
 800314e:	d125      	bne.n	800319c <_svfiprintf_r+0x1b0>
 8003150:	2207      	movs	r2, #7
 8003152:	9b07      	ldr	r3, [sp, #28]
 8003154:	3307      	adds	r3, #7
 8003156:	4393      	bics	r3, r2
 8003158:	3308      	adds	r3, #8
 800315a:	9307      	str	r3, [sp, #28]
 800315c:	6963      	ldr	r3, [r4, #20]
 800315e:	9a04      	ldr	r2, [sp, #16]
 8003160:	189b      	adds	r3, r3, r2
 8003162:	6163      	str	r3, [r4, #20]
 8003164:	e765      	b.n	8003032 <_svfiprintf_r+0x46>
 8003166:	4343      	muls	r3, r0
 8003168:	0035      	movs	r5, r6
 800316a:	2101      	movs	r1, #1
 800316c:	189b      	adds	r3, r3, r2
 800316e:	e7a6      	b.n	80030be <_svfiprintf_r+0xd2>
 8003170:	2301      	movs	r3, #1
 8003172:	425b      	negs	r3, r3
 8003174:	e7d0      	b.n	8003118 <_svfiprintf_r+0x12c>
 8003176:	2300      	movs	r3, #0
 8003178:	200a      	movs	r0, #10
 800317a:	001a      	movs	r2, r3
 800317c:	3501      	adds	r5, #1
 800317e:	6063      	str	r3, [r4, #4]
 8003180:	7829      	ldrb	r1, [r5, #0]
 8003182:	1c6e      	adds	r6, r5, #1
 8003184:	3930      	subs	r1, #48	; 0x30
 8003186:	2909      	cmp	r1, #9
 8003188:	d903      	bls.n	8003192 <_svfiprintf_r+0x1a6>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0c5      	beq.n	800311a <_svfiprintf_r+0x12e>
 800318e:	9209      	str	r2, [sp, #36]	; 0x24
 8003190:	e7c3      	b.n	800311a <_svfiprintf_r+0x12e>
 8003192:	4342      	muls	r2, r0
 8003194:	0035      	movs	r5, r6
 8003196:	2301      	movs	r3, #1
 8003198:	1852      	adds	r2, r2, r1
 800319a:	e7f1      	b.n	8003180 <_svfiprintf_r+0x194>
 800319c:	ab07      	add	r3, sp, #28
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	003a      	movs	r2, r7
 80031a2:	0021      	movs	r1, r4
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <_svfiprintf_r+0x1fc>)
 80031a6:	9803      	ldr	r0, [sp, #12]
 80031a8:	e000      	b.n	80031ac <_svfiprintf_r+0x1c0>
 80031aa:	bf00      	nop
 80031ac:	9004      	str	r0, [sp, #16]
 80031ae:	9b04      	ldr	r3, [sp, #16]
 80031b0:	3301      	adds	r3, #1
 80031b2:	d1d3      	bne.n	800315c <_svfiprintf_r+0x170>
 80031b4:	89bb      	ldrh	r3, [r7, #12]
 80031b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80031b8:	065b      	lsls	r3, r3, #25
 80031ba:	d400      	bmi.n	80031be <_svfiprintf_r+0x1d2>
 80031bc:	e72d      	b.n	800301a <_svfiprintf_r+0x2e>
 80031be:	2001      	movs	r0, #1
 80031c0:	4240      	negs	r0, r0
 80031c2:	e72a      	b.n	800301a <_svfiprintf_r+0x2e>
 80031c4:	ab07      	add	r3, sp, #28
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	003a      	movs	r2, r7
 80031ca:	0021      	movs	r1, r4
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <_svfiprintf_r+0x1fc>)
 80031ce:	9803      	ldr	r0, [sp, #12]
 80031d0:	f000 f87c 	bl	80032cc <_printf_i>
 80031d4:	e7ea      	b.n	80031ac <_svfiprintf_r+0x1c0>
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	08003824 	.word	0x08003824
 80031dc:	0800382a 	.word	0x0800382a
 80031e0:	0800382e 	.word	0x0800382e
 80031e4:	00000000 	.word	0x00000000
 80031e8:	08002f29 	.word	0x08002f29

080031ec <_printf_common>:
 80031ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ee:	0015      	movs	r5, r2
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	688a      	ldr	r2, [r1, #8]
 80031f4:	690b      	ldr	r3, [r1, #16]
 80031f6:	000c      	movs	r4, r1
 80031f8:	9000      	str	r0, [sp, #0]
 80031fa:	4293      	cmp	r3, r2
 80031fc:	da00      	bge.n	8003200 <_printf_common+0x14>
 80031fe:	0013      	movs	r3, r2
 8003200:	0022      	movs	r2, r4
 8003202:	602b      	str	r3, [r5, #0]
 8003204:	3243      	adds	r2, #67	; 0x43
 8003206:	7812      	ldrb	r2, [r2, #0]
 8003208:	2a00      	cmp	r2, #0
 800320a:	d001      	beq.n	8003210 <_printf_common+0x24>
 800320c:	3301      	adds	r3, #1
 800320e:	602b      	str	r3, [r5, #0]
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	069b      	lsls	r3, r3, #26
 8003214:	d502      	bpl.n	800321c <_printf_common+0x30>
 8003216:	682b      	ldr	r3, [r5, #0]
 8003218:	3302      	adds	r3, #2
 800321a:	602b      	str	r3, [r5, #0]
 800321c:	6822      	ldr	r2, [r4, #0]
 800321e:	2306      	movs	r3, #6
 8003220:	0017      	movs	r7, r2
 8003222:	401f      	ands	r7, r3
 8003224:	421a      	tst	r2, r3
 8003226:	d027      	beq.n	8003278 <_printf_common+0x8c>
 8003228:	0023      	movs	r3, r4
 800322a:	3343      	adds	r3, #67	; 0x43
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	1e5a      	subs	r2, r3, #1
 8003230:	4193      	sbcs	r3, r2
 8003232:	6822      	ldr	r2, [r4, #0]
 8003234:	0692      	lsls	r2, r2, #26
 8003236:	d430      	bmi.n	800329a <_printf_common+0xae>
 8003238:	0022      	movs	r2, r4
 800323a:	9901      	ldr	r1, [sp, #4]
 800323c:	9800      	ldr	r0, [sp, #0]
 800323e:	9e08      	ldr	r6, [sp, #32]
 8003240:	3243      	adds	r2, #67	; 0x43
 8003242:	47b0      	blx	r6
 8003244:	1c43      	adds	r3, r0, #1
 8003246:	d025      	beq.n	8003294 <_printf_common+0xa8>
 8003248:	2306      	movs	r3, #6
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	682a      	ldr	r2, [r5, #0]
 800324e:	68e1      	ldr	r1, [r4, #12]
 8003250:	2500      	movs	r5, #0
 8003252:	4003      	ands	r3, r0
 8003254:	2b04      	cmp	r3, #4
 8003256:	d103      	bne.n	8003260 <_printf_common+0x74>
 8003258:	1a8d      	subs	r5, r1, r2
 800325a:	43eb      	mvns	r3, r5
 800325c:	17db      	asrs	r3, r3, #31
 800325e:	401d      	ands	r5, r3
 8003260:	68a3      	ldr	r3, [r4, #8]
 8003262:	6922      	ldr	r2, [r4, #16]
 8003264:	4293      	cmp	r3, r2
 8003266:	dd01      	ble.n	800326c <_printf_common+0x80>
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	18ed      	adds	r5, r5, r3
 800326c:	2700      	movs	r7, #0
 800326e:	42bd      	cmp	r5, r7
 8003270:	d120      	bne.n	80032b4 <_printf_common+0xc8>
 8003272:	2000      	movs	r0, #0
 8003274:	e010      	b.n	8003298 <_printf_common+0xac>
 8003276:	3701      	adds	r7, #1
 8003278:	68e3      	ldr	r3, [r4, #12]
 800327a:	682a      	ldr	r2, [r5, #0]
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	42bb      	cmp	r3, r7
 8003280:	ddd2      	ble.n	8003228 <_printf_common+0x3c>
 8003282:	0022      	movs	r2, r4
 8003284:	2301      	movs	r3, #1
 8003286:	9901      	ldr	r1, [sp, #4]
 8003288:	9800      	ldr	r0, [sp, #0]
 800328a:	9e08      	ldr	r6, [sp, #32]
 800328c:	3219      	adds	r2, #25
 800328e:	47b0      	blx	r6
 8003290:	1c43      	adds	r3, r0, #1
 8003292:	d1f0      	bne.n	8003276 <_printf_common+0x8a>
 8003294:	2001      	movs	r0, #1
 8003296:	4240      	negs	r0, r0
 8003298:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800329a:	2030      	movs	r0, #48	; 0x30
 800329c:	18e1      	adds	r1, r4, r3
 800329e:	3143      	adds	r1, #67	; 0x43
 80032a0:	7008      	strb	r0, [r1, #0]
 80032a2:	0021      	movs	r1, r4
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	3145      	adds	r1, #69	; 0x45
 80032a8:	7809      	ldrb	r1, [r1, #0]
 80032aa:	18a2      	adds	r2, r4, r2
 80032ac:	3243      	adds	r2, #67	; 0x43
 80032ae:	3302      	adds	r3, #2
 80032b0:	7011      	strb	r1, [r2, #0]
 80032b2:	e7c1      	b.n	8003238 <_printf_common+0x4c>
 80032b4:	0022      	movs	r2, r4
 80032b6:	2301      	movs	r3, #1
 80032b8:	9901      	ldr	r1, [sp, #4]
 80032ba:	9800      	ldr	r0, [sp, #0]
 80032bc:	9e08      	ldr	r6, [sp, #32]
 80032be:	321a      	adds	r2, #26
 80032c0:	47b0      	blx	r6
 80032c2:	1c43      	adds	r3, r0, #1
 80032c4:	d0e6      	beq.n	8003294 <_printf_common+0xa8>
 80032c6:	3701      	adds	r7, #1
 80032c8:	e7d1      	b.n	800326e <_printf_common+0x82>
	...

080032cc <_printf_i>:
 80032cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ce:	b08b      	sub	sp, #44	; 0x2c
 80032d0:	9206      	str	r2, [sp, #24]
 80032d2:	000a      	movs	r2, r1
 80032d4:	3243      	adds	r2, #67	; 0x43
 80032d6:	9307      	str	r3, [sp, #28]
 80032d8:	9005      	str	r0, [sp, #20]
 80032da:	9204      	str	r2, [sp, #16]
 80032dc:	7e0a      	ldrb	r2, [r1, #24]
 80032de:	000c      	movs	r4, r1
 80032e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80032e2:	2a78      	cmp	r2, #120	; 0x78
 80032e4:	d807      	bhi.n	80032f6 <_printf_i+0x2a>
 80032e6:	2a62      	cmp	r2, #98	; 0x62
 80032e8:	d809      	bhi.n	80032fe <_printf_i+0x32>
 80032ea:	2a00      	cmp	r2, #0
 80032ec:	d100      	bne.n	80032f0 <_printf_i+0x24>
 80032ee:	e0c1      	b.n	8003474 <_printf_i+0x1a8>
 80032f0:	2a58      	cmp	r2, #88	; 0x58
 80032f2:	d100      	bne.n	80032f6 <_printf_i+0x2a>
 80032f4:	e08c      	b.n	8003410 <_printf_i+0x144>
 80032f6:	0026      	movs	r6, r4
 80032f8:	3642      	adds	r6, #66	; 0x42
 80032fa:	7032      	strb	r2, [r6, #0]
 80032fc:	e022      	b.n	8003344 <_printf_i+0x78>
 80032fe:	0010      	movs	r0, r2
 8003300:	3863      	subs	r0, #99	; 0x63
 8003302:	2815      	cmp	r0, #21
 8003304:	d8f7      	bhi.n	80032f6 <_printf_i+0x2a>
 8003306:	f7fc fefd 	bl	8000104 <__gnu_thumb1_case_shi>
 800330a:	0016      	.short	0x0016
 800330c:	fff6001f 	.word	0xfff6001f
 8003310:	fff6fff6 	.word	0xfff6fff6
 8003314:	001ffff6 	.word	0x001ffff6
 8003318:	fff6fff6 	.word	0xfff6fff6
 800331c:	fff6fff6 	.word	0xfff6fff6
 8003320:	003600a8 	.word	0x003600a8
 8003324:	fff6009a 	.word	0xfff6009a
 8003328:	00b9fff6 	.word	0x00b9fff6
 800332c:	0036fff6 	.word	0x0036fff6
 8003330:	fff6fff6 	.word	0xfff6fff6
 8003334:	009e      	.short	0x009e
 8003336:	0026      	movs	r6, r4
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	3642      	adds	r6, #66	; 0x42
 800333c:	1d11      	adds	r1, r2, #4
 800333e:	6019      	str	r1, [r3, #0]
 8003340:	6813      	ldr	r3, [r2, #0]
 8003342:	7033      	strb	r3, [r6, #0]
 8003344:	2301      	movs	r3, #1
 8003346:	e0a7      	b.n	8003498 <_printf_i+0x1cc>
 8003348:	6808      	ldr	r0, [r1, #0]
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	1d0a      	adds	r2, r1, #4
 800334e:	0605      	lsls	r5, r0, #24
 8003350:	d50b      	bpl.n	800336a <_printf_i+0x9e>
 8003352:	680d      	ldr	r5, [r1, #0]
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	2d00      	cmp	r5, #0
 8003358:	da03      	bge.n	8003362 <_printf_i+0x96>
 800335a:	232d      	movs	r3, #45	; 0x2d
 800335c:	9a04      	ldr	r2, [sp, #16]
 800335e:	426d      	negs	r5, r5
 8003360:	7013      	strb	r3, [r2, #0]
 8003362:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <_printf_i+0x21c>)
 8003364:	270a      	movs	r7, #10
 8003366:	9303      	str	r3, [sp, #12]
 8003368:	e01b      	b.n	80033a2 <_printf_i+0xd6>
 800336a:	680d      	ldr	r5, [r1, #0]
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	0641      	lsls	r1, r0, #25
 8003370:	d5f1      	bpl.n	8003356 <_printf_i+0x8a>
 8003372:	b22d      	sxth	r5, r5
 8003374:	e7ef      	b.n	8003356 <_printf_i+0x8a>
 8003376:	680d      	ldr	r5, [r1, #0]
 8003378:	6819      	ldr	r1, [r3, #0]
 800337a:	1d08      	adds	r0, r1, #4
 800337c:	6018      	str	r0, [r3, #0]
 800337e:	062e      	lsls	r6, r5, #24
 8003380:	d501      	bpl.n	8003386 <_printf_i+0xba>
 8003382:	680d      	ldr	r5, [r1, #0]
 8003384:	e003      	b.n	800338e <_printf_i+0xc2>
 8003386:	066d      	lsls	r5, r5, #25
 8003388:	d5fb      	bpl.n	8003382 <_printf_i+0xb6>
 800338a:	680d      	ldr	r5, [r1, #0]
 800338c:	b2ad      	uxth	r5, r5
 800338e:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <_printf_i+0x21c>)
 8003390:	2708      	movs	r7, #8
 8003392:	9303      	str	r3, [sp, #12]
 8003394:	2a6f      	cmp	r2, #111	; 0x6f
 8003396:	d000      	beq.n	800339a <_printf_i+0xce>
 8003398:	3702      	adds	r7, #2
 800339a:	0023      	movs	r3, r4
 800339c:	2200      	movs	r2, #0
 800339e:	3343      	adds	r3, #67	; 0x43
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	6863      	ldr	r3, [r4, #4]
 80033a4:	60a3      	str	r3, [r4, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	db03      	blt.n	80033b2 <_printf_i+0xe6>
 80033aa:	2204      	movs	r2, #4
 80033ac:	6821      	ldr	r1, [r4, #0]
 80033ae:	4391      	bics	r1, r2
 80033b0:	6021      	str	r1, [r4, #0]
 80033b2:	2d00      	cmp	r5, #0
 80033b4:	d102      	bne.n	80033bc <_printf_i+0xf0>
 80033b6:	9e04      	ldr	r6, [sp, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <_printf_i+0x10a>
 80033bc:	9e04      	ldr	r6, [sp, #16]
 80033be:	0028      	movs	r0, r5
 80033c0:	0039      	movs	r1, r7
 80033c2:	f7fc ff2f 	bl	8000224 <__aeabi_uidivmod>
 80033c6:	9b03      	ldr	r3, [sp, #12]
 80033c8:	3e01      	subs	r6, #1
 80033ca:	5c5b      	ldrb	r3, [r3, r1]
 80033cc:	7033      	strb	r3, [r6, #0]
 80033ce:	002b      	movs	r3, r5
 80033d0:	0005      	movs	r5, r0
 80033d2:	429f      	cmp	r7, r3
 80033d4:	d9f3      	bls.n	80033be <_printf_i+0xf2>
 80033d6:	2f08      	cmp	r7, #8
 80033d8:	d109      	bne.n	80033ee <_printf_i+0x122>
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	07db      	lsls	r3, r3, #31
 80033de:	d506      	bpl.n	80033ee <_printf_i+0x122>
 80033e0:	6863      	ldr	r3, [r4, #4]
 80033e2:	6922      	ldr	r2, [r4, #16]
 80033e4:	4293      	cmp	r3, r2
 80033e6:	dc02      	bgt.n	80033ee <_printf_i+0x122>
 80033e8:	2330      	movs	r3, #48	; 0x30
 80033ea:	3e01      	subs	r6, #1
 80033ec:	7033      	strb	r3, [r6, #0]
 80033ee:	9b04      	ldr	r3, [sp, #16]
 80033f0:	1b9b      	subs	r3, r3, r6
 80033f2:	6123      	str	r3, [r4, #16]
 80033f4:	9b07      	ldr	r3, [sp, #28]
 80033f6:	0021      	movs	r1, r4
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	9805      	ldr	r0, [sp, #20]
 80033fc:	9b06      	ldr	r3, [sp, #24]
 80033fe:	aa09      	add	r2, sp, #36	; 0x24
 8003400:	f7ff fef4 	bl	80031ec <_printf_common>
 8003404:	1c43      	adds	r3, r0, #1
 8003406:	d14c      	bne.n	80034a2 <_printf_i+0x1d6>
 8003408:	2001      	movs	r0, #1
 800340a:	4240      	negs	r0, r0
 800340c:	b00b      	add	sp, #44	; 0x2c
 800340e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003410:	3145      	adds	r1, #69	; 0x45
 8003412:	700a      	strb	r2, [r1, #0]
 8003414:	4a34      	ldr	r2, [pc, #208]	; (80034e8 <_printf_i+0x21c>)
 8003416:	9203      	str	r2, [sp, #12]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	6821      	ldr	r1, [r4, #0]
 800341c:	ca20      	ldmia	r2!, {r5}
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	0608      	lsls	r0, r1, #24
 8003422:	d516      	bpl.n	8003452 <_printf_i+0x186>
 8003424:	07cb      	lsls	r3, r1, #31
 8003426:	d502      	bpl.n	800342e <_printf_i+0x162>
 8003428:	2320      	movs	r3, #32
 800342a:	4319      	orrs	r1, r3
 800342c:	6021      	str	r1, [r4, #0]
 800342e:	2710      	movs	r7, #16
 8003430:	2d00      	cmp	r5, #0
 8003432:	d1b2      	bne.n	800339a <_printf_i+0xce>
 8003434:	2320      	movs	r3, #32
 8003436:	6822      	ldr	r2, [r4, #0]
 8003438:	439a      	bics	r2, r3
 800343a:	6022      	str	r2, [r4, #0]
 800343c:	e7ad      	b.n	800339a <_printf_i+0xce>
 800343e:	2220      	movs	r2, #32
 8003440:	6809      	ldr	r1, [r1, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	6022      	str	r2, [r4, #0]
 8003446:	0022      	movs	r2, r4
 8003448:	2178      	movs	r1, #120	; 0x78
 800344a:	3245      	adds	r2, #69	; 0x45
 800344c:	7011      	strb	r1, [r2, #0]
 800344e:	4a27      	ldr	r2, [pc, #156]	; (80034ec <_printf_i+0x220>)
 8003450:	e7e1      	b.n	8003416 <_printf_i+0x14a>
 8003452:	0648      	lsls	r0, r1, #25
 8003454:	d5e6      	bpl.n	8003424 <_printf_i+0x158>
 8003456:	b2ad      	uxth	r5, r5
 8003458:	e7e4      	b.n	8003424 <_printf_i+0x158>
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	680d      	ldr	r5, [r1, #0]
 800345e:	1d10      	adds	r0, r2, #4
 8003460:	6949      	ldr	r1, [r1, #20]
 8003462:	6018      	str	r0, [r3, #0]
 8003464:	6813      	ldr	r3, [r2, #0]
 8003466:	062e      	lsls	r6, r5, #24
 8003468:	d501      	bpl.n	800346e <_printf_i+0x1a2>
 800346a:	6019      	str	r1, [r3, #0]
 800346c:	e002      	b.n	8003474 <_printf_i+0x1a8>
 800346e:	066d      	lsls	r5, r5, #25
 8003470:	d5fb      	bpl.n	800346a <_printf_i+0x19e>
 8003472:	8019      	strh	r1, [r3, #0]
 8003474:	2300      	movs	r3, #0
 8003476:	9e04      	ldr	r6, [sp, #16]
 8003478:	6123      	str	r3, [r4, #16]
 800347a:	e7bb      	b.n	80033f4 <_printf_i+0x128>
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	1d11      	adds	r1, r2, #4
 8003480:	6019      	str	r1, [r3, #0]
 8003482:	6816      	ldr	r6, [r2, #0]
 8003484:	2100      	movs	r1, #0
 8003486:	0030      	movs	r0, r6
 8003488:	6862      	ldr	r2, [r4, #4]
 800348a:	f000 f831 	bl	80034f0 <memchr>
 800348e:	2800      	cmp	r0, #0
 8003490:	d001      	beq.n	8003496 <_printf_i+0x1ca>
 8003492:	1b80      	subs	r0, r0, r6
 8003494:	6060      	str	r0, [r4, #4]
 8003496:	6863      	ldr	r3, [r4, #4]
 8003498:	6123      	str	r3, [r4, #16]
 800349a:	2300      	movs	r3, #0
 800349c:	9a04      	ldr	r2, [sp, #16]
 800349e:	7013      	strb	r3, [r2, #0]
 80034a0:	e7a8      	b.n	80033f4 <_printf_i+0x128>
 80034a2:	6923      	ldr	r3, [r4, #16]
 80034a4:	0032      	movs	r2, r6
 80034a6:	9906      	ldr	r1, [sp, #24]
 80034a8:	9805      	ldr	r0, [sp, #20]
 80034aa:	9d07      	ldr	r5, [sp, #28]
 80034ac:	47a8      	blx	r5
 80034ae:	1c43      	adds	r3, r0, #1
 80034b0:	d0aa      	beq.n	8003408 <_printf_i+0x13c>
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	079b      	lsls	r3, r3, #30
 80034b6:	d415      	bmi.n	80034e4 <_printf_i+0x218>
 80034b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ba:	68e0      	ldr	r0, [r4, #12]
 80034bc:	4298      	cmp	r0, r3
 80034be:	daa5      	bge.n	800340c <_printf_i+0x140>
 80034c0:	0018      	movs	r0, r3
 80034c2:	e7a3      	b.n	800340c <_printf_i+0x140>
 80034c4:	0022      	movs	r2, r4
 80034c6:	2301      	movs	r3, #1
 80034c8:	9906      	ldr	r1, [sp, #24]
 80034ca:	9805      	ldr	r0, [sp, #20]
 80034cc:	9e07      	ldr	r6, [sp, #28]
 80034ce:	3219      	adds	r2, #25
 80034d0:	47b0      	blx	r6
 80034d2:	1c43      	adds	r3, r0, #1
 80034d4:	d098      	beq.n	8003408 <_printf_i+0x13c>
 80034d6:	3501      	adds	r5, #1
 80034d8:	68e3      	ldr	r3, [r4, #12]
 80034da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	42ab      	cmp	r3, r5
 80034e0:	dcf0      	bgt.n	80034c4 <_printf_i+0x1f8>
 80034e2:	e7e9      	b.n	80034b8 <_printf_i+0x1ec>
 80034e4:	2500      	movs	r5, #0
 80034e6:	e7f7      	b.n	80034d8 <_printf_i+0x20c>
 80034e8:	08003835 	.word	0x08003835
 80034ec:	08003846 	.word	0x08003846

080034f0 <memchr>:
 80034f0:	b2c9      	uxtb	r1, r1
 80034f2:	1882      	adds	r2, r0, r2
 80034f4:	4290      	cmp	r0, r2
 80034f6:	d101      	bne.n	80034fc <memchr+0xc>
 80034f8:	2000      	movs	r0, #0
 80034fa:	4770      	bx	lr
 80034fc:	7803      	ldrb	r3, [r0, #0]
 80034fe:	428b      	cmp	r3, r1
 8003500:	d0fb      	beq.n	80034fa <memchr+0xa>
 8003502:	3001      	adds	r0, #1
 8003504:	e7f6      	b.n	80034f4 <memchr+0x4>

08003506 <memcpy>:
 8003506:	2300      	movs	r3, #0
 8003508:	b510      	push	{r4, lr}
 800350a:	429a      	cmp	r2, r3
 800350c:	d100      	bne.n	8003510 <memcpy+0xa>
 800350e:	bd10      	pop	{r4, pc}
 8003510:	5ccc      	ldrb	r4, [r1, r3]
 8003512:	54c4      	strb	r4, [r0, r3]
 8003514:	3301      	adds	r3, #1
 8003516:	e7f8      	b.n	800350a <memcpy+0x4>

08003518 <memmove>:
 8003518:	b510      	push	{r4, lr}
 800351a:	4288      	cmp	r0, r1
 800351c:	d902      	bls.n	8003524 <memmove+0xc>
 800351e:	188b      	adds	r3, r1, r2
 8003520:	4298      	cmp	r0, r3
 8003522:	d303      	bcc.n	800352c <memmove+0x14>
 8003524:	2300      	movs	r3, #0
 8003526:	e007      	b.n	8003538 <memmove+0x20>
 8003528:	5c8b      	ldrb	r3, [r1, r2]
 800352a:	5483      	strb	r3, [r0, r2]
 800352c:	3a01      	subs	r2, #1
 800352e:	d2fb      	bcs.n	8003528 <memmove+0x10>
 8003530:	bd10      	pop	{r4, pc}
 8003532:	5ccc      	ldrb	r4, [r1, r3]
 8003534:	54c4      	strb	r4, [r0, r3]
 8003536:	3301      	adds	r3, #1
 8003538:	429a      	cmp	r2, r3
 800353a:	d1fa      	bne.n	8003532 <memmove+0x1a>
 800353c:	e7f8      	b.n	8003530 <memmove+0x18>
	...

08003540 <_free_r>:
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	0005      	movs	r5, r0
 8003544:	2900      	cmp	r1, #0
 8003546:	d010      	beq.n	800356a <_free_r+0x2a>
 8003548:	1f0c      	subs	r4, r1, #4
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	da00      	bge.n	8003552 <_free_r+0x12>
 8003550:	18e4      	adds	r4, r4, r3
 8003552:	0028      	movs	r0, r5
 8003554:	f000 f918 	bl	8003788 <__malloc_lock>
 8003558:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <_free_r+0x90>)
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <_free_r+0x2c>
 8003560:	6063      	str	r3, [r4, #4]
 8003562:	6014      	str	r4, [r2, #0]
 8003564:	0028      	movs	r0, r5
 8003566:	f000 f917 	bl	8003798 <__malloc_unlock>
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	42a3      	cmp	r3, r4
 800356e:	d908      	bls.n	8003582 <_free_r+0x42>
 8003570:	6821      	ldr	r1, [r4, #0]
 8003572:	1860      	adds	r0, r4, r1
 8003574:	4283      	cmp	r3, r0
 8003576:	d1f3      	bne.n	8003560 <_free_r+0x20>
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	1841      	adds	r1, r0, r1
 800357e:	6021      	str	r1, [r4, #0]
 8003580:	e7ee      	b.n	8003560 <_free_r+0x20>
 8003582:	001a      	movs	r2, r3
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <_free_r+0x4e>
 800358a:	42a3      	cmp	r3, r4
 800358c:	d9f9      	bls.n	8003582 <_free_r+0x42>
 800358e:	6811      	ldr	r1, [r2, #0]
 8003590:	1850      	adds	r0, r2, r1
 8003592:	42a0      	cmp	r0, r4
 8003594:	d10b      	bne.n	80035ae <_free_r+0x6e>
 8003596:	6820      	ldr	r0, [r4, #0]
 8003598:	1809      	adds	r1, r1, r0
 800359a:	1850      	adds	r0, r2, r1
 800359c:	6011      	str	r1, [r2, #0]
 800359e:	4283      	cmp	r3, r0
 80035a0:	d1e0      	bne.n	8003564 <_free_r+0x24>
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	1841      	adds	r1, r0, r1
 80035a8:	6011      	str	r1, [r2, #0]
 80035aa:	6053      	str	r3, [r2, #4]
 80035ac:	e7da      	b.n	8003564 <_free_r+0x24>
 80035ae:	42a0      	cmp	r0, r4
 80035b0:	d902      	bls.n	80035b8 <_free_r+0x78>
 80035b2:	230c      	movs	r3, #12
 80035b4:	602b      	str	r3, [r5, #0]
 80035b6:	e7d5      	b.n	8003564 <_free_r+0x24>
 80035b8:	6821      	ldr	r1, [r4, #0]
 80035ba:	1860      	adds	r0, r4, r1
 80035bc:	4283      	cmp	r3, r0
 80035be:	d103      	bne.n	80035c8 <_free_r+0x88>
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	1841      	adds	r1, r0, r1
 80035c6:	6021      	str	r1, [r4, #0]
 80035c8:	6063      	str	r3, [r4, #4]
 80035ca:	6054      	str	r4, [r2, #4]
 80035cc:	e7ca      	b.n	8003564 <_free_r+0x24>
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	20000174 	.word	0x20000174

080035d4 <sbrk_aligned>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	4e0f      	ldr	r6, [pc, #60]	; (8003614 <sbrk_aligned+0x40>)
 80035d8:	000d      	movs	r5, r1
 80035da:	6831      	ldr	r1, [r6, #0]
 80035dc:	0004      	movs	r4, r0
 80035de:	2900      	cmp	r1, #0
 80035e0:	d102      	bne.n	80035e8 <sbrk_aligned+0x14>
 80035e2:	f000 f8bf 	bl	8003764 <_sbrk_r>
 80035e6:	6030      	str	r0, [r6, #0]
 80035e8:	0029      	movs	r1, r5
 80035ea:	0020      	movs	r0, r4
 80035ec:	f000 f8ba 	bl	8003764 <_sbrk_r>
 80035f0:	1c43      	adds	r3, r0, #1
 80035f2:	d00a      	beq.n	800360a <sbrk_aligned+0x36>
 80035f4:	2303      	movs	r3, #3
 80035f6:	1cc5      	adds	r5, r0, #3
 80035f8:	439d      	bics	r5, r3
 80035fa:	42a8      	cmp	r0, r5
 80035fc:	d007      	beq.n	800360e <sbrk_aligned+0x3a>
 80035fe:	1a29      	subs	r1, r5, r0
 8003600:	0020      	movs	r0, r4
 8003602:	f000 f8af 	bl	8003764 <_sbrk_r>
 8003606:	1c43      	adds	r3, r0, #1
 8003608:	d101      	bne.n	800360e <sbrk_aligned+0x3a>
 800360a:	2501      	movs	r5, #1
 800360c:	426d      	negs	r5, r5
 800360e:	0028      	movs	r0, r5
 8003610:	bd70      	pop	{r4, r5, r6, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20000178 	.word	0x20000178

08003618 <_malloc_r>:
 8003618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800361a:	2203      	movs	r2, #3
 800361c:	1ccb      	adds	r3, r1, #3
 800361e:	4393      	bics	r3, r2
 8003620:	3308      	adds	r3, #8
 8003622:	0006      	movs	r6, r0
 8003624:	001f      	movs	r7, r3
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d232      	bcs.n	8003690 <_malloc_r+0x78>
 800362a:	270c      	movs	r7, #12
 800362c:	42b9      	cmp	r1, r7
 800362e:	d831      	bhi.n	8003694 <_malloc_r+0x7c>
 8003630:	0030      	movs	r0, r6
 8003632:	f000 f8a9 	bl	8003788 <__malloc_lock>
 8003636:	4d32      	ldr	r5, [pc, #200]	; (8003700 <_malloc_r+0xe8>)
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	001c      	movs	r4, r3
 800363c:	2c00      	cmp	r4, #0
 800363e:	d12e      	bne.n	800369e <_malloc_r+0x86>
 8003640:	0039      	movs	r1, r7
 8003642:	0030      	movs	r0, r6
 8003644:	f7ff ffc6 	bl	80035d4 <sbrk_aligned>
 8003648:	0004      	movs	r4, r0
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	d11e      	bne.n	800368c <_malloc_r+0x74>
 800364e:	682c      	ldr	r4, [r5, #0]
 8003650:	0025      	movs	r5, r4
 8003652:	2d00      	cmp	r5, #0
 8003654:	d14a      	bne.n	80036ec <_malloc_r+0xd4>
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	0029      	movs	r1, r5
 800365a:	18e3      	adds	r3, r4, r3
 800365c:	0030      	movs	r0, r6
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	f000 f880 	bl	8003764 <_sbrk_r>
 8003664:	9b01      	ldr	r3, [sp, #4]
 8003666:	4283      	cmp	r3, r0
 8003668:	d143      	bne.n	80036f2 <_malloc_r+0xda>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	3703      	adds	r7, #3
 800366e:	1aff      	subs	r7, r7, r3
 8003670:	2303      	movs	r3, #3
 8003672:	439f      	bics	r7, r3
 8003674:	3708      	adds	r7, #8
 8003676:	2f0c      	cmp	r7, #12
 8003678:	d200      	bcs.n	800367c <_malloc_r+0x64>
 800367a:	270c      	movs	r7, #12
 800367c:	0039      	movs	r1, r7
 800367e:	0030      	movs	r0, r6
 8003680:	f7ff ffa8 	bl	80035d4 <sbrk_aligned>
 8003684:	1c43      	adds	r3, r0, #1
 8003686:	d034      	beq.n	80036f2 <_malloc_r+0xda>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	19df      	adds	r7, r3, r7
 800368c:	6027      	str	r7, [r4, #0]
 800368e:	e013      	b.n	80036b8 <_malloc_r+0xa0>
 8003690:	2b00      	cmp	r3, #0
 8003692:	dacb      	bge.n	800362c <_malloc_r+0x14>
 8003694:	230c      	movs	r3, #12
 8003696:	2500      	movs	r5, #0
 8003698:	6033      	str	r3, [r6, #0]
 800369a:	0028      	movs	r0, r5
 800369c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	1bd1      	subs	r1, r2, r7
 80036a2:	d420      	bmi.n	80036e6 <_malloc_r+0xce>
 80036a4:	290b      	cmp	r1, #11
 80036a6:	d917      	bls.n	80036d8 <_malloc_r+0xc0>
 80036a8:	19e2      	adds	r2, r4, r7
 80036aa:	6027      	str	r7, [r4, #0]
 80036ac:	42a3      	cmp	r3, r4
 80036ae:	d111      	bne.n	80036d4 <_malloc_r+0xbc>
 80036b0:	602a      	str	r2, [r5, #0]
 80036b2:	6863      	ldr	r3, [r4, #4]
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	6053      	str	r3, [r2, #4]
 80036b8:	0030      	movs	r0, r6
 80036ba:	0025      	movs	r5, r4
 80036bc:	f000 f86c 	bl	8003798 <__malloc_unlock>
 80036c0:	2207      	movs	r2, #7
 80036c2:	350b      	adds	r5, #11
 80036c4:	1d23      	adds	r3, r4, #4
 80036c6:	4395      	bics	r5, r2
 80036c8:	1aea      	subs	r2, r5, r3
 80036ca:	429d      	cmp	r5, r3
 80036cc:	d0e5      	beq.n	800369a <_malloc_r+0x82>
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	50a3      	str	r3, [r4, r2]
 80036d2:	e7e2      	b.n	800369a <_malloc_r+0x82>
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	e7ec      	b.n	80036b2 <_malloc_r+0x9a>
 80036d8:	6862      	ldr	r2, [r4, #4]
 80036da:	42a3      	cmp	r3, r4
 80036dc:	d101      	bne.n	80036e2 <_malloc_r+0xca>
 80036de:	602a      	str	r2, [r5, #0]
 80036e0:	e7ea      	b.n	80036b8 <_malloc_r+0xa0>
 80036e2:	605a      	str	r2, [r3, #4]
 80036e4:	e7e8      	b.n	80036b8 <_malloc_r+0xa0>
 80036e6:	0023      	movs	r3, r4
 80036e8:	6864      	ldr	r4, [r4, #4]
 80036ea:	e7a7      	b.n	800363c <_malloc_r+0x24>
 80036ec:	002c      	movs	r4, r5
 80036ee:	686d      	ldr	r5, [r5, #4]
 80036f0:	e7af      	b.n	8003652 <_malloc_r+0x3a>
 80036f2:	230c      	movs	r3, #12
 80036f4:	0030      	movs	r0, r6
 80036f6:	6033      	str	r3, [r6, #0]
 80036f8:	f000 f84e 	bl	8003798 <__malloc_unlock>
 80036fc:	e7cd      	b.n	800369a <_malloc_r+0x82>
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	20000174 	.word	0x20000174

08003704 <_realloc_r>:
 8003704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003706:	0007      	movs	r7, r0
 8003708:	000e      	movs	r6, r1
 800370a:	0014      	movs	r4, r2
 800370c:	2900      	cmp	r1, #0
 800370e:	d105      	bne.n	800371c <_realloc_r+0x18>
 8003710:	0011      	movs	r1, r2
 8003712:	f7ff ff81 	bl	8003618 <_malloc_r>
 8003716:	0005      	movs	r5, r0
 8003718:	0028      	movs	r0, r5
 800371a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800371c:	2a00      	cmp	r2, #0
 800371e:	d103      	bne.n	8003728 <_realloc_r+0x24>
 8003720:	f7ff ff0e 	bl	8003540 <_free_r>
 8003724:	0025      	movs	r5, r4
 8003726:	e7f7      	b.n	8003718 <_realloc_r+0x14>
 8003728:	f000 f83e 	bl	80037a8 <_malloc_usable_size_r>
 800372c:	9001      	str	r0, [sp, #4]
 800372e:	4284      	cmp	r4, r0
 8003730:	d803      	bhi.n	800373a <_realloc_r+0x36>
 8003732:	0035      	movs	r5, r6
 8003734:	0843      	lsrs	r3, r0, #1
 8003736:	42a3      	cmp	r3, r4
 8003738:	d3ee      	bcc.n	8003718 <_realloc_r+0x14>
 800373a:	0021      	movs	r1, r4
 800373c:	0038      	movs	r0, r7
 800373e:	f7ff ff6b 	bl	8003618 <_malloc_r>
 8003742:	1e05      	subs	r5, r0, #0
 8003744:	d0e8      	beq.n	8003718 <_realloc_r+0x14>
 8003746:	9b01      	ldr	r3, [sp, #4]
 8003748:	0022      	movs	r2, r4
 800374a:	429c      	cmp	r4, r3
 800374c:	d900      	bls.n	8003750 <_realloc_r+0x4c>
 800374e:	001a      	movs	r2, r3
 8003750:	0031      	movs	r1, r6
 8003752:	0028      	movs	r0, r5
 8003754:	f7ff fed7 	bl	8003506 <memcpy>
 8003758:	0031      	movs	r1, r6
 800375a:	0038      	movs	r0, r7
 800375c:	f7ff fef0 	bl	8003540 <_free_r>
 8003760:	e7da      	b.n	8003718 <_realloc_r+0x14>
	...

08003764 <_sbrk_r>:
 8003764:	2300      	movs	r3, #0
 8003766:	b570      	push	{r4, r5, r6, lr}
 8003768:	4d06      	ldr	r5, [pc, #24]	; (8003784 <_sbrk_r+0x20>)
 800376a:	0004      	movs	r4, r0
 800376c:	0008      	movs	r0, r1
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	f7fd fc58 	bl	8001024 <_sbrk>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d103      	bne.n	8003780 <_sbrk_r+0x1c>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d000      	beq.n	8003780 <_sbrk_r+0x1c>
 800377e:	6023      	str	r3, [r4, #0]
 8003780:	bd70      	pop	{r4, r5, r6, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	2000017c 	.word	0x2000017c

08003788 <__malloc_lock>:
 8003788:	b510      	push	{r4, lr}
 800378a:	4802      	ldr	r0, [pc, #8]	; (8003794 <__malloc_lock+0xc>)
 800378c:	f000 f814 	bl	80037b8 <__retarget_lock_acquire_recursive>
 8003790:	bd10      	pop	{r4, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	20000180 	.word	0x20000180

08003798 <__malloc_unlock>:
 8003798:	b510      	push	{r4, lr}
 800379a:	4802      	ldr	r0, [pc, #8]	; (80037a4 <__malloc_unlock+0xc>)
 800379c:	f000 f80d 	bl	80037ba <__retarget_lock_release_recursive>
 80037a0:	bd10      	pop	{r4, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	20000180 	.word	0x20000180

080037a8 <_malloc_usable_size_r>:
 80037a8:	1f0b      	subs	r3, r1, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1f18      	subs	r0, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	da01      	bge.n	80037b6 <_malloc_usable_size_r+0xe>
 80037b2:	580b      	ldr	r3, [r1, r0]
 80037b4:	18c0      	adds	r0, r0, r3
 80037b6:	4770      	bx	lr

080037b8 <__retarget_lock_acquire_recursive>:
 80037b8:	4770      	bx	lr

080037ba <__retarget_lock_release_recursive>:
 80037ba:	4770      	bx	lr

080037bc <_init>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c2:	bc08      	pop	{r3}
 80037c4:	469e      	mov	lr, r3
 80037c6:	4770      	bx	lr

080037c8 <_fini>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr
